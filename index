<!DOCTYPE html>
<html lang="fr" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="apple-touch-icon" sizes="180x180" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 180 180'%3E%3Cdefs%3E%3ClinearGradient id='bg' x1='0%25' y1='0%25' x2='100%25' y2='100%25'%3E%3Cstop offset='0%25' style='stop-color:%23000000'/%3E%3Cstop offset='100%25' style='stop-color:%231a1a1a'/%3E%3C/linearGradient%3E%3ClinearGradient id='bolt' x1='50%25' y1='0%25' x2='50%25' y2='100%25'%3E%3Cstop offset='0%25' style='stop-color:%23FF4444'/%3E%3Cstop offset='50%25' style='stop-color:%23DC2626'/%3E%3Cstop offset='100%25' style='stop-color:%23991B1B'/%3E%3C/linearGradient%3E%3C/defs%3E%3Crect width='180' height='180' fill='url(%23bg)' rx='40'/%3E%3Cpath d='M120 25 L50 105 L78 105 L45 165 L115 85 L87 85 Z' fill='url(%23bolt)' stroke='%23000000' stroke-width='4'/%3E%3Cpath d='M120 25 L50 105 L78 105 L45 165 L115 85 L87 85 Z' fill='%23ffffff' opacity='0.25'/%3E%3C/svg%3E">
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 180 180'%3E%3Cdefs%3E%3ClinearGradient id='bg' x1='0%25' y1='0%25' x2='100%25' y2='100%25'%3E%3Cstop offset='0%25' style='stop-color:%23000000'/%3E%3Cstop offset='100%25' style='stop-color:%231a1a1a'/%3E%3C/linearGradient%3E%3ClinearGradient id='bolt' x1='50%25' y1='0%25' x2='50%25' y2='100%25'%3E%3Cstop offset='0%25' style='stop-color:%23FF4444'/%3E%3Cstop offset='50%25' style='stop-color:%23DC2626'/%3E%3Cstop offset='100%25' style='stop-color:%23991B1B'/%3E%3C/linearGradient%3E%3C/defs%3E%3Crect width='180' height='180' fill='url(%23bg)' rx='40'/%3E%3Cpath d='M120 25 L50 105 L78 105 L45 165 L115 85 L87 85 Z' fill='url(%23bolt)' stroke='%23000000' stroke-width='4'/%3E%3Cpath d='M120 25 L50 105 L78 105 L45 165 L115 85 L87 85 Z' fill='%23ffffff' opacity='0.25'/%3E%3C/svg%3E">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="TeslaCharge V2">
    <meta name="theme-color" content="#DC2626">
    <title>Suivi de Recharge Tesla</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <script>
        tailwind.config = {
          darkMode: 'class',
        }
    </script>
    <style>
@keyframes star-bounce {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.3); }
}

/* FAB au-dessus de la bottom bar sur mobile */
@media (max-width: 768px) {
    #fab {
        bottom: 5.5rem !important;
    }
}

.star-animate {
    animation: star-bounce 0.3s ease-out;
}

@keyframes shimmer {
    0% { background-position: -1000px 0; }
    100% { background-position: 1000px 0; }
}

.skeleton {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 1000px 100%;
    animation: shimmer 2s infinite;
}

html.dark .skeleton {
    background: linear-gradient(90deg, #1f2937 25%, #374151 50%, #1f2937 75%);
}
        @keyframes pulse-ring {
    0% {
        transform: scale(0.8);
        opacity: 1;
    }
    100% {
        transform: scale(1.4);
        opacity: 0;
    }
}


#fab:hover {
    transform: scale(1.1);
}

#fab::before {
    content: '';
    position: absolute;
    inset: -4px;
    border-radius: 50%;
    background: rgba(220, 38, 38, 0.4);
    animation: pulse-ring 1.5s ease-out infinite;
    z-index: -1;
}

#fab > * {
    position: relative;
    z-index: 1;
}

.favorite-btn {
    position: relative;
    overflow: hidden;
}

.favorite-btn::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(45deg, transparent, rgba(255,255,255,0.3), transparent);
    transform: translateX(-100%) translateY(-100%) rotate(45deg);
    transition: transform 0.6s ease;
}

.favorite-btn:hover::after {
    transform: translateX(100%) translateY(100%) rotate(45deg);
}

input:focus, select:focus {
    transform: scale(1.02);
    transition: transform 0.2s ease;
}

#monthly-prediction {
    text-shadow: 0 0 20px rgba(234, 88, 12, 0.3);
    transition: text-shadow 0.3s ease;
}

#monthly-prediction:hover {
    text-shadow: 0 0 30px rgba(234, 88, 12, 0.5);
}

.spinner {
    width: 56px;
    height: 56px;
    border: 6px solid transparent;
    border-top-color: #DC2626;
    border-right-color: #DC2626;
    border-radius: 50%;
    position: relative;
    animation: rotation 1s cubic-bezier(0.68, -0.55, 0.27, 1.55) infinite;
}

.spinner::after {
    content: '';
    position: absolute;
    inset: 8px;
    border: 4px solid transparent;
    border-bottom-color: #EF4444;
    border-left-color: #EF4444;
    border-radius: 50%;
    animation: rotation 0.8s cubic-bezier(0.68, -0.55, 0.27, 1.55) infinite reverse;
}
        @keyframes slideInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

#stats-overview > div {
    animation: slideInUp 0.5s ease-out forwards;
    opacity: 0;
}

#stats-overview > div:nth-child(1) { animation-delay: 0.1s; }
#stats-overview > div:nth-child(2) { animation-delay: 0.2s; }
#stats-overview > div:nth-child(3) { animation-delay: 0.3s; }
#stats-overview > div:nth-child(4) { animation-delay: 0.4s; }

@keyframes gradient-shift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
}

.gradient-title {
    background: linear-gradient(45deg, #DC2626, #EF4444, #DC2626);
    background-size: 200% 200%;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    animation: gradient-shift 3s ease infinite;
}

        body {
            font-family: 'Inter', sans-serif;
            overscroll-behavior-x: none; /* Prevents browser back navigation on swipe */
        }
        html.dark ::-webkit-scrollbar { width: 8px; }
        html.dark ::-webkit-scrollbar-track { background: #1f2937; }
        html.dark ::-webkit-scrollbar-thumb { background: #4b5563; border-radius: 4px; }
        html.dark ::-webkit-scrollbar-thumb:hover { background: #6b7280; }
        
        .tab-btn.active {
            border-bottom-color: #DC2626;
        }
        html.dark .tab-btn.active { color: #F9FAFB; }
        html .tab-btn.active { color: #111827; }
        
        .side-menu-link.active {
            background-color: #DC2626;
            color: white;
        }

        #side-menu, #menu-overlay {
            transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
        }

        .favorite-btn {
            transition: all 0.2s ease-in-out;
        }
        .favorite-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }
        html.dark .favorite-btn:hover {
             box-shadow: 0 4px 10px rgba(0,0,0,0.3);
        }

        .accordion-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease-in-out;
        }

        .accordion-header i.fa-chevron-down {
            transition: transform 0.3s ease-in-out;
        }

        .accordion-header.open i.fa-chevron-down {
            transform: rotate(180deg);
        }
        
        /* Toast Notifications */
        #toast-container {
            position: fixed;
            bottom: 1.5rem;
            left: 50%;
            transform: translateX(-50%);
            z-index: 100;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            align-items: center;
        }
        .toast {
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 500;
            color: white;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            animation: toast-in 0.3s ease-out forwards, toast-out 0.3s ease-in 3s forwards;
        }
        .toast.success { background-color: #16A34A; }
        .toast.error { background-color: #DC2626; }
        @keyframes toast-in {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @keyframes toast-out {
            from { opacity: 1; transform: translateY(0); }
            to { opacity: 0; transform: translateY(20px); }
        }
        
        /* Loading Spinner */
        #loader {
            position: fixed;
            inset: 0;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 110;
        }
        #loader.hidden {
            display: none;
        }
        .spinner {
            width: 56px;
            height: 56px;
            border: 6px solid #4B5563;
            border-bottom-color: #DC2626;
            border-radius: 50%;
            display: inline-block;
            box-sizing: border-box;
            animation: rotation 1s linear infinite;
        }

        @keyframes rotation {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Bottom Sheet Modal */
        @media (max-width: 768px) {
            #modal.active .modal-content {
                animation: slide-up 0.3s ease-out forwards;
            }
            #modal .modal-content {
                animation: slide-down 0.3s ease-out forwards;
            }
            @keyframes slide-up {
                from { transform: translateY(100%); }
                to { transform: translateY(0); }
            }
            @keyframes slide-down {
                from { transform: translateY(0); }
                to { transform: translateY(100%); }
            }
        }
        
        /* Swipe to delete */
        .swipe-container {
            overflow: hidden;
            position: relative;
        }
        .swipe-content {
            will-change: transform;
            transition: transform 0.3s ease-out;
            cursor: grab;
        }
        .swipe-actions {
            position: absolute;
            top: 0;
            right: 0;
            height: 100%;
            display: flex;
            align-items: center;
            transform: translateX(100%);
        }

        .date-filter-btn.active {
            background-color: #DC2626;
            color: white;
        }

        /* Bottom Navigation Bar (Mobile only) */
#bottom-nav {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: white;
    border-top: 1px solid #e5e7eb;
    z-index: 40;
    display: none;
    padding: 8px 0;
}

html.dark #bottom-nav {
    background: #1f2937;
    border-top-color: #374151;
}

@media (max-width: 768px) {
    #bottom-nav {
        display: flex;
    }
    
    /* Ajouter padding-bottom au contenu pour éviter que la bottom bar ne cache le contenu */
    #logged-in-view {
        padding-bottom: 80px;
    }
}

.bottom-nav-btn {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 0.75rem 0;
    color: #9ca3af;
    font-size: 0.75rem;
    border: none;
    background: transparent;
    transition: color 0.2s;
}

.bottom-nav-btn.active {
    color: #DC2626;
}

.bottom-nav-btn i {
    font-size: 1.25rem;
    margin-bottom: 0.25rem;
}
    </style>
</head>
<body class="bg-gray-100 dark:bg-[#111827] text-gray-800 dark:text-gray-200 transition-colors duration-300">

    <div id="app" class="min-h-screen container mx-auto p-4 md:p-8">
        <header class="relative text-center mb-8">
             
            <div class="absolute top-0 right-0 flex items-center gap-4">
                 <div id="auth-container">
                    <button id="login-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                        <i class="fab fa-google mr-2"></i> Se connecter
                    </button>
                    <div id="user-info" class="hidden items-center gap-3">
                        <span id="user-name" class="font-semibold text-sm"></span>
                        <button id="logout-btn" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                            <i class="fas fa-sign-out-alt"></i>
                        </button>
                    </div>
                </div>
                <button id="mobile-settings-btn" class="p-2 rounded-full text-gray-500 hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none md:hidden">
                        <i class="fas fa-cog"></i>
                </button>
                
                <button id="theme-toggle" class="p-2 rounded-full text-gray-500 hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none">
                    <i class="fas fa-sun" id="theme-icon-sun"></i>
                    <i class="fas fa-moon hidden" id="theme-icon-moon"></i>
                </button>
            </div>
            <h1 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white pt-12 md:pt-0">
                Tesla<span class="gradient-title">Charge</span> Tracker
            </h1>
            <p class="text-gray-600 dark:text-gray-400 mt-2">Votre tableau de bord de suivi de recharge.</p>
        </header>
        
        <div id="logged-out-view" class="text-center py-20 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
             <i class="fas fa-lock text-5xl text-red-500 mb-4"></i>
             <h2 class="text-2xl font-bold mb-2">Connectez-vous pour commencer</h2>
             <p class="text-gray-600 dark:text-gray-400">Vos données seront synchronisées sur tous vos appareils.</p>
        </div>

        <div id="logged-in-view" class="hidden">
            <!-- Top Tabs Navigation for Desktop -->
            <nav class="hidden md:flex border-b border-gray-200 dark:border-gray-700 mb-8 overflow-x-auto">
                <button data-tab="accueil" class="tab-btn text-gray-500 dark:text-gray-400 py-4 px-6 block hover:text-gray-900 dark:hover:text-white focus:outline-none border-b-2 font-medium border-transparent active whitespace-nowrap">
                    <i class="fas fa-tachometer-alt mr-2"></i> Accueil
                </button>
                <button data-tab="historique" class="tab-btn text-gray-500 dark:text-gray-400 py-4 px-6 block hover:text-gray-900 dark:hover:text-white focus:outline-none border-b-2 font-medium border-transparent whitespace-nowrap">
                    <i class="fas fa-history mr-2"></i> Historique
                </button>
                <button data-tab="statistiques" class="tab-btn text-gray-500 dark:text-gray-400 py-4 px-6 block hover:text-gray-900 dark:hover:text-white focus:outline-none border-b-2 font-medium border-transparent whitespace-nowrap">
                    <i class="fas fa-chart-pie mr-2"></i> Statistiques
                </button>
                <button data-tab="efficacite" class="tab-btn text-gray-500 dark:text-gray-400 py-4 px-6 block hover:text-gray-900 dark:hover:text-white focus:outline-none border-b-2 font-medium border-transparent whitespace-nowrap">
                    <i class="fas fa-bolt mr-2"></i> Efficacité
                </button>
                <button data-tab="bornes" class="tab-btn text-gray-500 dark:text-gray-400 py-4 px-6 block hover:text-gray-900 dark:hover:text-white focus:outline-none border-b-2 font-medium border-transparent whitespace-nowrap">
                    <i class="fas fa-charging-station mr-2"></i> Bornes
                </button>
                <button data-tab="parametres" class="tab-btn text-gray-500 dark:text-gray-400 py-4 px-6 block hover:text-gray-900 dark:hover:text-white focus:outline-none border-b-2 font-medium border-transparent whitespace-nowrap">
                    <i class="fas fa-cog mr-2"></i> Paramètres
                </button>
            </nav>

            <!-- Tab Content -->
            <div id="tab-content" class="md:mt-0 mt-8">

                <!-- Paramètres Tab -->
<div id="parametres" class="tab-pane hidden">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div class="bg-white dark:bg-gray-800 p-4 md:p-6 rounded-lg shadow-lg">
            <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-6">Apparence</h2>
            <div class="space-y-2">
                <label class="block text-gray-500 dark:text-gray-400 mb-2">Thème</label>
                <div class="flex gap-4">
                    <label class="flex items-center gap-2 cursor-pointer">
                        <input type="radio" name="theme" value="light" class="form-radio text-red-600">
                        <span>Clair</span>
                    </label>
                    <label class="flex items-center gap-2 cursor-pointer">
                        <input type="radio" name="theme" value="dark" class="form-radio text-red-600">
                        <span>Sombre</span>
                    </label>
                </div>
            </div>
        </div>
        <div class="bg-white dark:bg-gray-800 p-4 md:p-6 rounded-lg shadow-lg">
            <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-6">Gestion des Données</h2>
            <div class="flex flex-col gap-4">
                <button id="import-csv-recharges-btn" class="w-full text-left bg-blue-600/90 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded-lg transition-colors duration-300">
                    <i class="fas fa-bolt mr-2"></i> Importer Recharges (CSV)
                </button>
                <input type="file" id="csv-import-recharges" class="hidden" accept=".csv">
                <button id="import-mileage-btn" class="w-full text-left bg-blue-600/90 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded-lg transition-colors duration-300">
                    <i class="fas fa-road mr-2"></i> Importer Kilométrages (CSV)
                </button>
                <input type="file" id="csv-import-mileage" class="hidden" accept=".csv">
                <button id="export-all-btn" class="w-full text-left bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-lg transition-colors duration-300">
                    <i class="fas fa-file-archive mr-2"></i> Exporter toutes les données (ZIP)
                </button>
                <button id="delete-all-data-btn" class="w-full text-left bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-4 rounded-lg transition-colors duration-300">
                    <i class="fas fa-trash-alt mr-2"></i> Supprimer toutes les données
                </button>
            </div>
        </div>
    </div>
</div>
 <!-- Accueil Tab -->
<div id="accueil" class="tab-pane active">
    <section id="stats-overview" class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
        <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg transition-colors" id="total-cost-widget">
    <div class="flex justify-between items-center mb-2">
        <h3 class="text-gray-500 dark:text-gray-400 text-xs sm:text-sm font-medium cursor-pointer hover:text-gray-700 dark:hover:text-gray-200" onclick="document.querySelector('[data-tab=historique]').click()">Coût Total</h3>
        <select id="cost-period-select" class="bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white text-xs p-1 rounded border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-1 focus:ring-red-500" onclick="event.stopPropagation()">
            <option value="month">Ce mois</option>
            <option value="3months">3 mois</option>
            <option value="year">Cette année</option>
            <option value="all">Tout</option>
        </select>
    </div>
    <p id="total-cost" class="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-750 p-2 -m-2 rounded transition-colors" data-value="0" onclick="document.querySelector('[data-tab=historique]').click()">0,00 €</p>
    <span id="cost-comparison" class="text-xs font-semibold"></span>
</div>                        <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg">
                            <div class="flex justify-between items-center mb-2">
                                <h3 class="text-gray-500 dark:text-gray-400 text-xs sm:text-sm font-medium">Total kWh</h3>
                                <select id="kwh-period-select" class="bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white text-xs p-1 rounded border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-1 focus:ring-red-500">
                                    <option value="month">Ce mois</option>
                                    <option value="3months">3 mois</option>
                                    <option value="year">Cette année</option>
                                    <option value="all">Tout</option>
                                </select>
                            </div>
                            <p id="total-kwh" class="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white" data-value="0">0 kWh</p>
                        </div>
                        <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg">
                            <h3 class="text-gray-500 dark:text-gray-400 text-xs sm:text-sm font-medium mb-2">Coût Moyen/kWh</h3>
                            <p id="avg-cost" class="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white" data-value="0">0,00 €</p>
                        </div>
                        <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg">
                            <h3 class="text-gray-500 dark:text-gray-400 text-xs sm:text-sm font-medium mb-2">Prédiction ce mois</h3>
                            <p id="monthly-prediction" class="text-xl sm:text-2xl font-bold text-orange-600">~0,00 €</p>
                            <span id="prediction-detail" class="text-xs text-gray-500"></span>
                        </div>
                    </section>

                    <section class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                        <div class="lg:col-span-2 bg-white dark:bg-gray-800 p-4 md:p-6 rounded-lg shadow-lg">
                            <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Dépenses Mensuelles</h2>
                            <div class="relative h-96"><canvas id="monthly-chart"></canvas></div>
                        </div>

                        <div class="flex flex-col gap-8">
                            <div id="quick-add-container" class="bg-white dark:bg-gray-800 p-4 md:p-6 rounded-lg shadow-lg hidden md:block">
                                <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Ajout Rapide</h2>
                                <form id="quick-add-form" class="space-y-4">
                                    <div id="quick-add-favorites" class="flex flex-wrap gap-2 mb-2">
                                        <!-- Favorite buttons will be injected here -->
                                    </div>
                                    <div>
                                        <label for="quick-station" class="sr-only">Borne</label>
                                        <input type="text" id="quick-station" list="station-suggestions-quick" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="Nom de la borne" required>
                                        <datalist id="station-suggestions-quick"></datalist>
                                    </div>
                                    <div class="grid grid-cols-2 gap-4">
                                        <input type="number" step="0.01" min="0" id="quick-kwh" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="kWh" required>
                                        <input type="number" step="0.001" min="0" id="quick-cost-per-kwh" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="€/kWh" required>
                                    </div>
                                    <div class="text-right">
    <p class="text-sm text-gray-500 dark:text-gray-400">Coût total</p>
    <p id="quick-total-cost" class="text-xl font-bold text-red-600">0,00 €</p>
</div>
                                    <button type="submit" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-4 rounded-lg transition-colors duration-300">
                                        <i class="fas fa-plus mr-2"></i> Ajouter
                                    </button>
                                </form>
                            </div>

                            <div class="bg-white dark:bg-gray-800 p-4 md:p-6 rounded-lg shadow-lg">
                                <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Activité Récente</h2>
                                <ul id="recent-charges-list" class="space-y-3">
                                    <!-- Populated by JS -->
                                </ul>
                            </div>
                        </div>
                    </section>
                </div>


                <!-- Historique Tab -->
                <div id="historique" class="tab-pane hidden">
                    <main class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 md:p-6">
                        <div class="flex flex-col md:flex-row justify-between items-center mb-6 gap-4 flex-wrap">
                             <div class="relative flex-grow w-full md:w-auto">
                               <input type="text" id="search-history" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 pl-10 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="Rechercher par borne...">
                               <i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
                            </div>
                            <div id="date-filters" class="flex gap-2 flex-wrap justify-center">
                                <button data-filter="all" class="date-filter-btn bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 font-bold py-2 px-4 rounded-lg text-sm active">Tout</button>
                                <button data-filter="1m" class="date-filter-btn bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 font-bold py-2 px-4 rounded-lg text-sm">1 mois</button>
                                <button data-filter="3m" class="date-filter-btn bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 font-bold py-2 px-4 rounded-lg text-sm">3 mois</button>
                                 <button data-filter="1y" class="date-filter-btn bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 font-bold py-2 px-4 rounded-lg text-sm">1 an</button>
                            </div>
                        </div>
                        <div id="history-accordion" class="space-y-4">
                            <!-- Accordion items will be generated here -->
                        </div>
                    </main>
                </div>

                <!-- Statistiques Tab -->
                <div id="statistiques" class="tab-pane hidden">
                     <section class="grid grid-cols-1 lg:grid-cols-5 gap-8">
                        <div class="lg:col-span-2 bg-white dark:bg-gray-800 p-4 md:p-6 rounded-lg shadow-lg">
                            <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Répartition par Borne (Coût)</h2>
                            <div class="relative h-96"><canvas id="station-chart"></canvas></div>
                        </div>
                        <div class="lg:col-span-3 bg-white dark:bg-gray-800 p-4 md:p-6 rounded-lg shadow-lg">
                            <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Résumé Mensuel (Dépenses)</h2>
                             <div class="overflow-x-auto max-h-96">
                                <table class="w-full text-left">
                                    <thead class="bg-gray-200 dark:bg-gray-900 text-gray-600 dark:text-gray-400 uppercase text-sm sticky top-0">
                                        <tr>
                                            <th class="p-3 cursor-pointer" data-sort="month">Mois <i class="fas fa-sort"></i></th>
                                            <th class="p-3 text-right cursor-pointer" data-sort="cost">Coût Total <i class="fas fa-sort"></i></th>
                                            <th class="p-3 text-right cursor-pointer" data-sort="kwh">Total kWh <i class="fas fa-sort"></i></th>
                                            <th class="p-3 text-right cursor-pointer" data-sort="avg">Coût/kWh Moyen <i class="fas fa-sort"></i></th>
                                        </tr>
                                    </thead>
                                    <tbody id="monthly-stats-body"></tbody>
                                </table>
                            </div>
                        </div>
                    </section>
                </div>
                
                <!-- Efficacité Tab -->
                <div id="efficacite" class="tab-pane hidden">
                    <div id="mileage-reminder" class="notification-banner hidden bg-yellow-200 dark:bg-yellow-800/50 border border-yellow-400 dark:border-yellow-700 text-yellow-800 dark:text-yellow-200 px-4 py-3 rounded-lg relative mb-6" role="alert">
                        <strong class="font-bold">Rappel !</strong>
                        <span class="block sm:inline">N'oubliez pas d'encoder votre kilométrage pour ce mois-ci.</span>
                        <span id="close-reminder-btn" class="absolute top-0 bottom-0 right-0 px-4 py-3 cursor-pointer">
                            <i class="fas fa-times"></i>
                        </span>
                    </div>

                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        <!-- Left Column: Analysis -->
                         <div class="flex flex-col gap-8">
                            <div class="bg-white dark:bg-gray-800 p-4 md:p-6 rounded-lg shadow-lg">
                                <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Efficacité (Km / kWh)</h2>
                                <div class="relative h-96"><canvas id="efficiency-chart"></canvas></div>
                            </div>
                            <div class="bg-white dark:bg-gray-800 p-4 md:p-6 rounded-lg shadow-lg">
                                <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Résumé Mensuel (Performance)</h2>
                                <div class="overflow-x-auto -mx-4 md:mx-0">
                                    <div class="inline-block min-w-full align-middle px-4 md:px-0">
                                        <table class="w-full text-left">
                                            <thead class="bg-gray-200 dark:bg-gray-900 text-gray-600 dark:text-gray-400 uppercase text-xs sm:text-sm sticky top-0">
                                                <tr>
                                                    <th class="p-2 sm:p-3 cursor-pointer whitespace-nowrap" data-sort="month">Mois <i class="fas fa-sort"></i></th>
                                                    <th class="p-2 sm:p-3 text-right cursor-pointer whitespace-nowrap" data-sort="kmDriven">Km <i class="fas fa-sort"></i></th>
                                                    <th class="p-2 sm:p-3 text-right cursor-pointer whitespace-nowrap" data-sort="kmPerKwh">Km/kWh <i class="fas fa-sort"></i></th>
                                                </tr>
                                            </thead>
                                            <tbody id="efficiency-stats-body"></tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Right Column: Data Management -->
                        <div class="flex flex-col gap-8">
                            <div class="bg-white dark:bg-gray-800 p-4 md:p-6 rounded-lg shadow-lg">
                                 <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Mettre à jour le Kilométrage</h2>
                                 <form id="mileage-form" class="flex flex-col sm:flex-row items-end gap-4">
                                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 flex-grow w-full">
                                        <div>
                                            <label for="mileage-month-select" class="block text-gray-500 dark:text-gray-400 mb-2">Mois</label>
                                            <select id="mileage-month-select" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500 h-[50px]">
                                                <!-- Options will be populated by JS -->
                                            </select>
                                        </div>
                                        <div>
                                            <label for="current-mileage" class="block text-gray-500 dark:text-gray-400 mb-2">Kilométrage de fin de mois</label>
                                            <input type="number" id="current-mileage" min="0" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="Ex: 85400" required>
                                        </div>
                                    </div>
                                    <button type="submit" class="w-full sm:w-auto bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-4 rounded-lg transition-colors duration-300 mt-4 sm:mt-0">
                                        <i class="fas fa-save mr-2"></i> Enregistrer
                                    </button>
                                 </form>
                            </div>
            
                            <div class="bg-white dark:bg-gray-800 p-4 md:p-6 rounded-lg shadow-lg">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Données Encodées</h3>
                                <ul id="mileage-list" class="space-y-2">
                                    <!-- Mileage list will be populated here -->
                                </ul>
                            </div>
                        </div>

                    </div>
                </div>
                
                <!-- Bornes Tab -->
<div id="bornes" class="tab-pane hidden">
    <div class="grid grid-cols-1 gap-8">
        <!-- Section Bornes Favorites -->
        <div class="bg-white dark:bg-gray-800 p-4 md:p-6 rounded-lg shadow-lg">
            <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">
    <i class="fas fa-cog text-gray-500 mr-2"></i>Configuration des Bornes
</h2>
<p class="text-sm text-gray-600 dark:text-gray-400 mb-4">Ajoutez et configurez des bornes avec leur tarif pour faciliter l'ajout rapide de recharges.</p>
            
            <form id="favorite-station-form" class="grid sm:grid-cols-2 gap-4 items-end mb-6 p-4 bg-gray-100 dark:bg-gray-900/50 rounded-lg">
                <input type="hidden" id="favorite-id">
                <input type="hidden" id="favorite-latitude">
                <input type="hidden" id="favorite-longitude">
                <div>
                    <label for="favorite-name" class="block text-gray-500 dark:text-gray-400 mb-2">Nom de la borne</label>
                    <input type="text" id="favorite-name" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="Ex: Domicile" required>
                </div>
                <div>
                    <label for="favorite-cost" class="block text-gray-500 dark:text-gray-400 mb-2">Coût / kWh (€)</label>
                    <input type="number" step="0.001" min="0" id="favorite-cost" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="0.35" required>
                </div>
                <div class="sm:col-span-2">
                    <label for="favorite-maps-link" class="block text-gray-500 dark:text-gray-400 mb-2">Lien Google Maps (optionnel)</label>
                    <input type="text" id="favorite-maps-link" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="Collez un lien Google Maps ici...">
                    <p id="maps-link-status" class="text-xs mt-1"></p>
                </div>
                <button type="submit" class="w-full sm:col-span-2 bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-4 rounded-lg transition-colors duration-300">
                    <i class="fas fa-plus mr-2"></i> <span id="favorite-form-btn-text">Ajouter</span>
                </button>
            </form>

            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Ma liste</h3>
            <ul id="favorites-list" class="space-y-2">
                <!-- Favorite stations list will be populated here -->
            </ul>
        </div>

        <!-- Section Bornes Visitées -->
        <div class="bg-white dark:bg-gray-800 p-4 md:p-6 rounded-lg shadow-lg">
            <div class="flex justify-between items-center mb-4">
    <h2 class="text-xl font-bold text-gray-900 dark:text-white">
        <i class="fas fa-map-marker-alt text-blue-500 mr-2"></i>Historique des Bornes
    </h2>
    <div class="flex gap-2">
        <button class="visited-sort-btn active bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 font-bold py-2 px-3 rounded-lg text-xs" data-sort="visits">
            <i class="fas fa-hashtag mr-1"></i>Visites
        </button>
        <button class="visited-sort-btn bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 font-bold py-2 px-3 rounded-lg text-xs" data-sort="alpha">
            <i class="fas fa-sort-alpha-down mr-1"></i>A-Z
        </button>
    </div>
</div>
<p class="text-sm text-gray-600 dark:text-gray-400 mb-4">Toutes les bornes où vous avez rechargé, générées automatiquement depuis votre historique.</p>
            <ul id="visited-stations-list" class="space-y-3">
                <!-- Visited stations will be populated here -->
            </ul>
        </div>
    </div>
</div>

    <!-- Modal / Bottom Sheet -->
    <div id="modal-overlay" class="fixed inset-0 bg-black bg-opacity-75 hidden z-40"></div>
    <div id="modal" class="fixed inset-0 flex items-end md:items-center justify-center md:p-4 z-50 pointer-events-none hidden [&.active]:pointer-events-auto">
         <div id="modal-content" class="modal-content bg-white dark:bg-gray-800 md:rounded-lg shadow-2xl w-full max-w-md p-6 md:p-8 fixed bottom-0 md:relative md:bottom-auto rounded-t-lg pointer-events-auto">
            <h2 id="modal-title" class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Ajouter une recharge</h2>
            <form id="charge-form">
                <div class="mb-4">
                    <label for="modal-favorites-select" class="block text-gray-500 dark:text-gray-400 mb-2">Favoris</label>
                    <select id="modal-favorites-select" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500">
                        <!-- Options will be populated by JS -->
                    </select>
                </div>
                <input type="hidden" id="charge-id">
                <div class="mb-4">
                    <label for="date" class="block text-gray-500 dark:text-gray-400 mb-2">Date</label>
                    <input type="date" id="date" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500 h-[50px]" required>
                </div>
                <div class="mb-4">
                    <label for="station" class="block text-gray-500 dark:text-gray-400 mb-2">Borne de Recharge</label>
                    <input type="text" id="station" list="station-suggestions" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="Ex: Bureau, Supercharger" required>
                    <datalist id="station-suggestions"></datalist>
                </div>
                <div class="grid grid-cols-2 gap-4 mb-6">
                    <div>
                        <label for="kwh" class="block text-gray-500 dark:text-gray-400 mb-2">kWh Rechargés</label>
                        <input type="number" step="0.01" min="0" id="kwh" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="0.00" required>
                    </div>
                    <div>
                        <label for="cost-per-kwh" class="block text-gray-500 dark:text-gray-400 mb-2">Coût / kWh (€)</label>
                        <input type="number" step="0.001" min="0" id="cost-per-kwh" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="0.000" required>
                    </div>
                </div>
                <div class="mb-4">
    <label for="note" class="block text-gray-500 dark:text-gray-400 mb-2">Note (optionnel)</label>
    <textarea id="note" rows="2" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="Ex: Station propre, recharge lente..."></textarea>
</div>

<div class="mb-4">
    <label class="block text-gray-500 dark:text-gray-400 mb-2">Photo (optionnel)</label>
    <input type="file" id="photo" accept="image/*" capture="environment" class="w-full text-sm bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-2 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500">
    <img id="photo-preview" class="hidden mt-2 rounded-lg max-h-40 w-full object-cover">
</div>

<div class="mb-4">
    <button type="button" id="get-location-btn" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">
        <i class="fas fa-map-marker-alt mr-2"></i><span id="location-status">Capturer la position GPS</span>
    </button>
    <input type="hidden" id="latitude">
    <input type="hidden" id="longitude">
</div>
                <div class="text-right mb-4">
                    <p class="text-sm text-gray-500 dark:text-gray-400">Coût total</p>
                    <p id="total-charge-cost" class="text-xl font-bold text-red-600">0,00 €</p>
                </div>
                <div class="flex justify-between items-center">
                    <button type="button" id="delete-btn-modal" class="bg-transparent text-gray-500 dark:text-gray-400 hover:text-red-500 font-bold py-2 px-4 rounded-lg transition-colors hidden"><i class="fas fa-trash-alt mr-2"></i>Supprimer</button>
                    <div class="flex justify-end gap-4 flex-grow">
                        <button type="button" id="cancel-btn" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">Annuler</button>
                        <button type="submit" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">Enregistrer</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Modal Edit Favorite -->
<div id="edit-favorite-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 hidden z-50">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-2xl w-full max-w-md p-6">
        <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Modifier la borne</h2>
        <form id="edit-favorite-form">
            <input type="hidden" id="edit-favorite-id">
            <input type="hidden" id="edit-favorite-latitude">
            <input type="hidden" id="edit-favorite-longitude">
            
            <div class="mb-4">
                <label for="edit-favorite-name" class="block text-gray-500 dark:text-gray-400 mb-2">Nom</label>
                <input type="text" id="edit-favorite-name" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" required>
            </div>
            
            <div class="mb-4">
                <label for="edit-favorite-cost" class="block text-gray-500 dark:text-gray-400 mb-2">Coût/kWh (€)</label>
                <input type="number" step="0.001" min="0" id="edit-favorite-cost" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" required>
            </div>
            
            <div class="mb-4">
                <label for="edit-favorite-maps-link" class="block text-gray-500 dark:text-gray-400 mb-2">Lien Google Maps (optionnel)</label>
                <input type="text" id="edit-favorite-maps-link" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="Collez un lien Google Maps ici...">
                <p id="edit-maps-link-status" class="text-xs mt-1"></p>
            </div>
            
            <div class="flex justify-end gap-4">
                <button type="button" id="cancel-edit-favorite" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">Annuler</button>
                <button type="submit" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">Enregistrer</button>
            </div>
        </form>
    </div>
</div>

<!-- Modal Edit Visited Station -->
<div id="edit-visited-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 hidden z-50">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-2xl w-full max-w-md p-6">
        <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-2">Modifier la borne</h2>
        <p class="text-sm text-gray-600 dark:text-gray-400 mb-4">Les modifications s'appliqueront à toutes les recharges de cette borne.</p>
        <form id="edit-visited-form">
            <input type="hidden" id="edit-visited-old-name">
            
            <div class="mb-4">
                <label for="edit-visited-name" class="block text-gray-500 dark:text-gray-400 mb-2">Nouveau nom</label>
                <input type="text" id="edit-visited-name" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" required>
            </div>
            
            <div class="mb-4">
                <label for="edit-visited-maps-link" class="block text-gray-500 dark:text-gray-400 mb-2">Ajouter/Modifier position GPS</label>
                <input type="text" id="edit-visited-maps-link" class="w-full bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="Collez un lien Google Maps...">
                <p id="edit-visited-status" class="text-xs mt-1"></p>
            </div>
            <input type="hidden" id="edit-visited-latitude">
            <input type="hidden" id="edit-visited-longitude">
            
            <div class="flex justify-end gap-4">
                <button type="button" id="cancel-edit-visited" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">Annuler</button>
                <button type="submit" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">Enregistrer</button>
            </div>
        </form>
    </div>
</div>

    <!-- Confirm Modal -->
    <div id="confirm-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 hidden z-50">
         <div class="bg-white dark:bg-gray-800 rounded-lg shadow-2xl w-full max-w-sm p-6">
            <h2 id="confirm-modal-title" class="text-xl font-bold text-gray-900 dark:text-white mb-4">Êtes-vous sûr ?</h2>
            <p id="confirm-modal-text" class="text-gray-600 dark:text-gray-400 mb-6">Cette action est irréversible.</p>
            <div class="flex justify-end gap-4">
                <button id="confirm-modal-cancel" class="bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-700 text-gray-900 dark:text-white font-bold py-2 px-4 rounded-lg transition-colors">Annuler</button>
                <button id="confirm-modal-confirm" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">Confirmer</button>
            </div>
        </div>
    </div>

    <!-- Toast container -->
    <div id="toast-container"></div>

    <!-- Loader -->
    <div id="loader">
        <div class="spinner"></div>
    </div>
    
    <!-- Floating Action Button -->
    <button id="fab" class="fixed bottom-6 right-6 bg-red-600 hover:bg-red-700 text-white w-14 h-14 rounded-full flex items-center justify-center shadow-lg focus:outline-none z-30 hidden">
        <i class="fas fa-plus text-2xl"></i>
    </button>
    
    <!-- Bottom Navigation (Mobile) -->
<nav id="bottom-nav">
    <button class="bottom-nav-btn active" data-tab="accueil">
        <i class="fas fa-home"></i>
        <span>Accueil</span>
    </button>
    <button class="bottom-nav-btn" data-tab="historique">
        <i class="fas fa-history"></i>
        <span>Historique</span>
    </button>
    <button class="bottom-nav-btn" data-tab="statistiques">
        <i class="fas fa-chart-pie"></i>
        <span>Stats</span>
    </button>
    <button class="bottom-nav-btn" data-tab="efficacite">
        <i class="fas fa-bolt"></i>
        <span>Efficacité</span>
    </button>
    <button class="bottom-nav-btn" data-tab="bornes">
        <i class="fas fa-charging-station"></i>
        <span>Bornes</span>
    </button>
</nav>

    <!-- Side Menu (for mobile) -->
    <div id="menu-overlay" class="fixed inset-0 bg-black bg-opacity-50 hidden z-30 md:hidden"></div>
    <div id="side-menu" class="fixed top-0 left-0 h-full w-64 bg-white dark:bg-gray-800 shadow-lg transform -translate-x-full z-40 md:hidden">
        <div class="p-4 border-b border-gray-200 dark:border-gray-700">
             <h2 class="text-xl font-bold text-gray-900 dark:text-white">
                Tesla<span class="text-red-600">Charge</span>
            </h2>
        </div>
        <div id="side-menu-links" class="p-4 flex flex-col gap-2">
            <button data-tab="accueil" class="side-menu-link text-left w-full p-3 rounded-lg font-semibold flex items-center gap-3 active"><i class="fas fa-tachometer-alt w-5 text-center"></i> Accueil</button>
            <button data-tab="historique" class="side-menu-link text-left w-full p-3 rounded-lg font-semibold flex items-center gap-3"><i class="fas fa-history w-5 text-center"></i> Historique</button>
            <button data-tab="statistiques" class="side-menu-link text-left w-full p-3 rounded-lg font-semibold flex items-center gap-3"><i class="fas fa-chart-pie w-5 text-center"></i> Statistiques</button>
            <button data-tab="efficacite" class="side-menu-link text-left w-full p-3 rounded-lg font-semibold flex items-center gap-3"><i class="fas fa-bolt w-5 text-center"></i> Efficacité</button>
            <button data-tab="bornes" class="side-menu-link text-left w-full p-3 rounded-lg font-semibold flex items-center gap-3"><i class="fas fa-charging-station w-5 text-center"></i> Bornes</button>
            <button data-tab="parametres" class="side-menu-link text-left w-full p-3 rounded-lg font-semibold flex items-center gap-3"><i class="fas fa-cog w-5 text-center"></i> Paramètres</button>
        </div>
    </div>


    <script type="module">
        // Firebase SDKs
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
        import { getAuth, onAuthStateChanged, GoogleAuthProvider, signInWithPopup, signOut } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
        import { getFirestore, collection, onSnapshot, addDoc, doc, updateDoc, deleteDoc, setDoc, getDocs } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

        const initialFavoriteStations = [
            { id: 1, name: 'Bureau', cost: 0.16 },
            { id: 2, name: 'EnergyVision', cost: 0.35 },
            { id: 3, name: 'Supercharger', cost: 0.40 },
            { id: 4, name: 'Nonna', cost: 0.00 }
        ];

        const appState = {
            charges: [], 
            monthlyStats: [],
            favoriteStations: [],
            charts: { monthly: null, station: null, efficiency: null },
            ui: { theme: 'dark', activeTab: 'accueil' },
            sortState: {
                monthlyStats: { key: 'month', direction: 'desc' },
                efficiencyStats: { key: 'month', direction: 'desc' },
                visitedStations: 'visits'
            },
            firebase: { auth: null, db: null, userId: null },
            listeners: []
        };

        // Navigation functions
window.openNavigation = function(lat, lon) {
    const pref = localStorage.getItem('preferredNavApp');
    if (pref) {
        window.open({'waze':`https://waze.com/ul?ll=${lat},${lon}&navigate=yes`,'google':`https://maps.google.com/?q=${lat},${lon}`,'apple':`http://maps.apple.com/?q=${lat},${lon}`}[pref]);
    } else {
        const m = document.createElement('div');
        m.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
        m.innerHTML = `<div class="bg-white dark:bg-gray-800 rounded-lg p-6 m-4 max-w-sm w-full"><h3 class="text-lg font-semibold mb-4 dark:text-white">Choisir navigation</h3><div class="space-y-2"><button onclick="window.nav('waze',${lat},${lon})" class="w-full px-4 py-3 bg-blue-500 text-white rounded-lg"><i class="fab fa-waze"></i> Waze</button><button onclick="window.nav('google',${lat},${lon})" class="w-full px-4 py-3 bg-green-600 text-white rounded-lg"><i class="fas fa-map-marked-alt"></i> Google Maps</button><button onclick="window.nav('apple',${lat},${lon})" class="w-full px-4 py-3 bg-gray-600 text-white rounded-lg"><i class="fas fa-map"></i> Apple Plans</button></div><div class="mt-4"><input type="checkbox" id="rememberChoice" class="w-4 h-4"><label class="text-sm ml-2 dark:text-gray-400">Se souvenir</label></div><button onclick="this.closest('.fixed').remove()" class="w-full mt-4 py-2 text-gray-600 dark:text-gray-400">Annuler</button></div>`;
        document.body.appendChild(m);
    }
};
window.nav = function(app, lat, lon) {
    if (document.getElementById('rememberChoice')?.checked) localStorage.setItem('preferredNavApp', app);
    const urls = {'waze':`https://waze.com/ul?ll=${lat},${lon}&navigate=yes`,'google':`https://maps.google.com/?q=${lat},${lon}`,'apple':`http://maps.apple.com/?q=${lat},${lon}`};
    window.location.href = urls[app];
};

        // DOM Elements
        const historyAccordion = document.getElementById('history-accordion');
        const modalOverlay = document.getElementById('modal-overlay');
        const modal = document.getElementById('modal');
        const modalContent = document.getElementById('modal-content');
        const chargeForm = document.getElementById('charge-form');
        const quickAddForm = document.getElementById('quick-add-form');
        const cancelBtn = document.getElementById('cancel-btn');
        const deleteBtnModal = document.getElementById('delete-btn-modal');
        const tabs = document.querySelectorAll('.tab-btn');
        const tabPanes = document.querySelectorAll('.tab-pane');
        const exportAllBtn = document.getElementById('export-all-btn');
        const importRechargesBtn = document.getElementById('import-csv-recharges-btn');
        const importInputRecharges = document.getElementById('csv-import-recharges');
        const importMileageBtn = document.getElementById('import-mileage-btn');
        const importInputMileage = document.getElementById('csv-import-mileage');
        const mileageForm = document.getElementById('mileage-form');
        const reminderBanner = document.getElementById('mileage-reminder');
        const closeReminderBtn = document.getElementById('close-reminder-btn');
        const mileageMonthSelect = document.getElementById('mileage-month-select');
        const themeToggle = document.getElementById('theme-toggle');
        const themeIconSun = document.getElementById('theme-icon-sun');
        const themeIconMoon = document.getElementById('theme-icon-moon');
        const favoriteStationForm = document.getElementById('favorite-station-form');
        const favoritesList = document.getElementById('favorites-list');
        const searchHistoryInput = document.getElementById('search-history');
        const deleteAllDataBtn = document.getElementById('delete-all-data-btn');
        const mileageList = document.getElementById('mileage-list');
        const confirmModal = document.getElementById('confirm-modal');
        const confirmModalTitle = document.getElementById('confirm-modal-title');
        const confirmModalText = document.getElementById('confirm-modal-text');
        const confirmModalCancel = document.getElementById('confirm-modal-cancel');
        const confirmModalConfirm = document.getElementById('confirm-modal-confirm');
        const toastContainer = document.getElementById('toast-container');
        const loader = document.getElementById('loader');
        const modalFavoritesSelect = document.getElementById('modal-favorites-select');
        const fab = document.getElementById('fab');
        const loginBtn = document.getElementById('login-btn');
        const logoutBtn = document.getElementById('logout-btn');
        const userInfo = document.getElementById('user-info');
        const userNameEl = document.getElementById('user-name');
        const loggedInView = document.getElementById('logged-in-view');
        const loggedOutView = document.getElementById('logged-out-view');
        const menuBtn = document.getElementById('menu-btn');
        const sideMenu = document.getElementById('side-menu');
        const menuOverlay = document.getElementById('menu-overlay');
        const sideMenuLinks = document.querySelectorAll('.side-menu-link');

        let confirmCallback = null;
        let currentPhotoBase64 = null;
        function formatCurrency(amount) {
            return new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(amount);
        }
        
        function getTodayAsYYYYMMDD() {
            const today = new Date();
            const year = today.getUTCFullYear();
            const month = String(today.getUTCMonth() + 1).padStart(2, '0');
            const day = String(today.getUTCDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        function parseUTCDate(dateString) {
            const [year, month, day] = dateString.split('-');
            return new Date(Date.UTC(year, parseInt(month) - 1, day || 1));
        }
        
        // --- UI FEEDBACK ---
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            toastContainer.appendChild(toast);
            setTimeout(() => {
                toast.remove();
            }, 3300);
        }

        function animateCountUp(el, end, isCurrency, decimals = 2) {
            let start = parseFloat(el.dataset.value) || 0;
            if (start === end) return;

            const duration = 1000;
            const frameDuration = 1000 / 60;
            const totalFrames = Math.round(duration / frameDuration);
            let frame = 0;

            const counter = setInterval(() => {
                frame++;
                const progress = frame / totalFrames;
                const current = start + (end - start) * progress;
                
                if (isCurrency) {
                    el.textContent = formatCurrency(current);
                } else {
                    el.textContent = `${current.toFixed(decimals)} kWh`;
                }

                if (frame === totalFrames) {
                    clearInterval(counter);
                    if (isCurrency) {
                        el.textContent = formatCurrency(end);
                    } else {
                        el.textContent = `${end.toFixed(decimals)} kWh`;
                    }
                }
            }, frameDuration);
            el.dataset.value = end;
        }

        function showLoader(show) {
            loader.classList.toggle('hidden', !show);
        }


        // --- MODALS ---
        function openConfirmModal(title, text, onConfirm) {
            confirmModalTitle.textContent = title;
            confirmModalText.textContent = text;
            confirmCallback = onConfirm;
            confirmModal.classList.remove('hidden');
        }

        function closeConfirmModal() {
            confirmModal.classList.add('hidden');
            confirmCallback = null;
        }

        // --- THEME ---
        function applyTheme(theme) {
           // document.querySelector('input[name="theme"][value="light"]').checked = theme === 'light';
           // document.querySelector('input[name="theme"][value="dark"]').checked = theme === 'dark';

            if (theme === 'dark') {
                document.documentElement.classList.add('dark');
                themeIconSun.classList.add('hidden');
                themeIconMoon.classList.remove('hidden');
            } else {
                document.documentElement.classList.remove('dark');
                themeIconSun.classList.remove('hidden');
                themeIconMoon.classList.add('hidden');
            }
            appState.ui.theme = theme;
            try {
                localStorage.setItem('theme', theme);
            } catch (e) {
                console.warn("Could not save theme to localStorage:", e);
            }
            redrawVisibleChart();
        }
        
        function toggleTheme() {
            const newTheme = appState.ui.theme === 'dark' ? 'light' : 'dark';
            applyTheme(newTheme);
        }
function openModal(charge = null) {
    modal.classList.remove('hidden');
    modal.classList.add('active');
    modalOverlay.classList.remove('hidden');
    
    document.getElementById('modal-title').textContent = charge ? 'Modifier la recharge' : 'Ajouter une recharge';
    deleteBtnModal.classList.toggle('hidden', !charge);
    
    if (charge) {
        document.getElementById('charge-id').value = charge.id || '';
        document.getElementById('date').value = charge.date;
        document.getElementById('station').value = charge.station;
        document.getElementById('kwh').value = charge.kwh;
        document.getElementById('cost-per-kwh').value = charge.costPerKwh;
    } else {
        chargeForm.reset();
        document.getElementById('charge-id').value = '';
        document.getElementById('date').value = getTodayAsYYYYMMDD();
    }
    
    // Reset photo et GPS
    currentPhotoBase64 = null;
    document.getElementById('photo-preview').classList.add('hidden');
    document.getElementById('photo-preview').src = '';
    document.getElementById('note').value = charge?.note || '';
    document.getElementById('latitude').value = charge?.latitude || '';
    document.getElementById('longitude').value = charge?.longitude || '';
    
    const locationBtn = document.getElementById('get-location-btn');
    const locationStatus = document.getElementById('location-status');
    if (charge?.latitude && charge?.longitude) {
        locationStatus.innerHTML = '<i class="fas fa-check mr-2"></i>Position enregistrée';
        locationBtn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
        locationBtn.classList.add('bg-green-600');
    } else {
        locationStatus.textContent = 'Capturer la position GPS';
        locationBtn.classList.remove('bg-green-600');
        locationBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');
    }
    
    if (charge?.photo) {
        currentPhotoBase64 = charge.photo;
        document.getElementById('photo-preview').src = charge.photo;
        document.getElementById('photo-preview').classList.remove('hidden');
    }

    updateTotalChargeCost();
}

function closeModal() {
    modal.classList.add('hidden');
    modal.classList.remove('active');
    modalOverlay.classList.add('hidden');
    chargeForm.reset();
    modalFavoritesSelect.selectedIndex = 0;
    currentPhotoBase64 = null;
    document.getElementById('photo').value = '';
}
        function renderChargesAccordion(filter = '', dateFilter = 'all') {
            historyAccordion.innerHTML = '';
            
            let filteredCharges = appState.charges.filter(charge => 
                charge.station.toLowerCase().includes(filter.toLowerCase())
            );
            
            if (dateFilter !== 'all') {
                const now = new Date();
                let startDate = new Date();
                if (dateFilter === '1m') startDate.setMonth(now.getMonth() - 1);
                if (dateFilter === '3m') startDate.setMonth(now.getMonth() - 3);
                if (dateFilter === '1y') startDate.setFullYear(now.getFullYear() - 1);
                
                const startStr = startDate.toISOString().split('T')[0];
                filteredCharges = filteredCharges.filter(c => c.date >= startStr);
            }

            const sortedCharges = [...filteredCharges].sort((a, b) => b.date.localeCompare(a.date));
            
            if (sortedCharges.length === 0) {
                const message = filter || dateFilter !== 'all' ? `Aucune recharge trouvée pour les filtres sélectionnés.` : 'Aucune recharge enregistrée.';
                historyAccordion.innerHTML = `<div class="text-center p-8 text-gray-500">${message}</div>`;
                return;
            }

            const groupedByMonth = sortedCharges.reduce((acc, charge) => {
                const month = charge.date.substring(0, 7);
                if (!acc[month]) acc[month] = [];
                acc[month].push(charge);
                return acc;
            }, {});

            Object.keys(groupedByMonth).sort().reverse().forEach(month => {
                const charges = groupedByMonth[month];
                const monthTotalCost = charges.reduce((sum, charge) => sum + (charge.kwh * charge.costPerKwh), 0);
                const monthTotalKwh = charges.reduce((sum, charge) => sum + charge.kwh, 0);

                const monthContainer = document.createElement('div');
                const monthName = parseUTCDate(month).toLocaleString('fr-FR', { month: 'long', year: 'numeric', timeZone: 'UTC' });
                
                monthContainer.innerHTML = `
                    <div class="accordion-header bg-gray-200 dark:bg-gray-900 p-4 rounded-lg cursor-pointer flex justify-between items-center">
                        <div>
                            <h3 class="font-bold text-lg text-gray-900 dark:text-white">${monthName}</h3>
                            <p class="text-sm text-gray-600 dark:text-gray-400">${formatCurrency(monthTotalCost)} | ${monthTotalKwh.toFixed(2)} kWh</p>
                        </div>
                        <i class="fas fa-chevron-down text-gray-500 dark:text-gray-400"></i>
                    </div>
                    <div class="accordion-content bg-white dark:bg-gray-800 rounded-b-lg">
                        <div class="p-4">
                            <ul class="space-y-3">
                                ${charges.map(charge => {
    const hasLocation = charge.latitude && charge.longitude;
    const mapsUrl = hasLocation ? `https://www.google.com/maps/dir/?api=1&destination=${charge.latitude},${charge.longitude}` : null;
    const wazeUrl = hasLocation ? `https://waze.com/ul?ll=${charge.latitude},${charge.longitude}&navigate=yes` : null;
    
    return `
        <li class="swipe-container bg-gray-100 dark:bg-gray-900/50 rounded-lg">
            <div class="swipe-actions">
                <button class="delete-btn h-full bg-red-600 text-white px-6" data-id="${charge.id}"><i class="fas fa-trash-alt"></i></button>
            </div>
            <div class="swipe-content bg-white dark:bg-gray-800 p-3 rounded-lg border-b border-gray-200 dark:border-gray-700">
                ${charge.photo ? `<img src="${charge.photo}" class="w-full h-32 object-cover rounded-lg mb-2 cursor-pointer" onclick="window.open(this.src)">` : ''}
                <div class="flex justify-between items-start">
                    <div class="flex-grow">
                        <p class="font-semibold text-gray-900 dark:text-white">${charge.station}</p>
                        <p class="text-sm text-gray-600 dark:text-gray-400">${parseUTCDate(charge.date).toLocaleDateString('fr-FR', { weekday: 'long', day: 'numeric', timeZone: 'UTC' })}</p>
                        ${charge.note ? `<p class="text-sm text-gray-500 dark:text-gray-400 italic mt-1">📝 ${charge.note}</p>` : ''}
                        ${hasLocation ? `
    <button onclick="openNavigation(${charge.latitude}, ${charge.longitude}, '${charge.station}')" class="md:hidden text-blue-600 hover:text-blue-700 p-2" title="Naviguer">
        <i class="fas fa-directions text-lg"></i>
    </button>
` : ''}
                    </div>
                    <div class="flex items-center gap-4 ml-3">
                        <div class="text-right">
                            <p class="font-bold text-gray-900 dark:text-white">${formatCurrency(charge.kwh * charge.costPerKwh)}</p>
                            <p class="text-sm text-gray-600 dark:text-gray-400">${charge.kwh.toFixed(2)} kWh</p>
                        </div>
                        <button class="edit-btn text-blue-500 hover:text-blue-400" data-id="${charge.id}"><i class="fas fa-pencil-alt"></i></button>
                    </div>
                </div>
            </div>
        </li>
    `;
}).join('')}
                            </ul>
                        </div>
                    </div>
                `;
                historyAccordion.appendChild(monthContainer);
            });

            historyAccordion.querySelectorAll('.accordion-header').forEach(header => {
                header.addEventListener('click', () => {
                    const content = header.nextElementSibling;
                    header.classList.toggle('open');
                    if (content.style.maxHeight) {
                        content.style.maxHeight = null;
                    } else {
                        content.style.maxHeight = content.scrollHeight + "px";
                    }
                });
            });

            historyAccordion.querySelectorAll('.edit-btn').forEach(btn => btn.addEventListener('click', (e) => handleEdit(e, btn.dataset.id)));
            historyAccordion.querySelectorAll('.delete-btn').forEach(btn => btn.addEventListener('click', (e) => handleDelete(e, btn.dataset.id)));
            historyAccordion.querySelectorAll('.swipe-container').forEach(addSwipeToDelete);
        }

        function handleEdit(e, chargeId) {
            e.stopPropagation();
            const charge = appState.charges.find(c => c.id == chargeId);
            if (charge) openModal(charge);
        }

        function handleDelete(e, chargeId) {
            e.stopPropagation();
            openConfirmModal('Supprimer la recharge ?', 'Cette action est définitive.', () => {
                const docRef = doc(appState.firebase.db, `users/${appState.firebase.userId}/charges`, chargeId);
                deleteDoc(docRef); // No need to refresh, onSnapshot will do it
                showToast("Recharge supprimée.");
            });
        }
        
        function renderRecentCharges() {
            const recentChargesList = document.getElementById('recent-charges-list');
            recentChargesList.innerHTML = '';
            const sortedCharges = [...appState.charges].sort((a, b) => b.date.localeCompare(a.date));
            const recent = sortedCharges.slice(0, 4);

            if (recent.length === 0) {
                recentChargesList.innerHTML = `<li class="text-center text-gray-500 py-4">Aucune recharge récente.</li>`;
                return;
            }

            recent.forEach(charge => {
                const li = document.createElement('li');
                li.className = 'flex justify-between items-center bg-gray-100 dark:bg-gray-700/50 p-3 rounded-lg cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-700';
                li.dataset.id = charge.id;
                li.innerHTML = `
                    <div>
                        <p class="font-semibold text-gray-900 dark:text-white">${charge.station}</p>
                        <p class="text-sm text-gray-600 dark:text-gray-400">${parseUTCDate(charge.date).toLocaleDateString('fr-FR', { timeZone: 'UTC' })}</p>
                    </div>
                    <div class="text-right">
                        <p class="font-bold text-gray-900 dark:text-white">${formatCurrency(charge.kwh * charge.costPerKwh)}</p>
                        <p class="text-sm text-gray-600 dark:text-gray-400">${charge.kwh.toFixed(2)} kWh</p>
                    </div>
                `;
                li.addEventListener('click', () => {
                    const chargeToDuplicate = { ...charge, date: getTodayAsYYYYMMDD() };
                    delete chargeToDuplicate.id;
                    openModal(chargeToDuplicate);
                });
                recentChargesList.appendChild(li);
            });
        }

        function updateStats() {
            const costPeriod = document.getElementById('cost-period-select').value;
            const kwhPeriod = document.getElementById('kwh-period-select').value;

            const getFilteredCharges = (period) => {
                const today = new Date();
                const currentMonthStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}`;
                
                switch(period) {
                    case 'month':
                        return appState.charges.filter(c => c.date.startsWith(currentMonthStr));
                    case '3months': {
                        const threeMonthsAgo = new Date(today.getFullYear(), today.getMonth() - 2, 1);
                        const threeMonthsStr = threeMonthsAgo.toISOString().substring(0, 7);
                        return appState.charges.filter(c => c.date.substring(0, 7) >= threeMonthsStr);
                    }
                    case 'year':
                        return appState.charges.filter(c => c.date.startsWith(today.getFullYear().toString()));
                    case 'all':
                    default:
                        return appState.charges;
                }
            };

            const costCharges = getFilteredCharges(costPeriod);
            const kwhCharges = getFilteredCharges(kwhPeriod);

            const totalCost = costCharges.reduce((sum, charge) => sum + (charge.kwh * charge.costPerKwh), 0);
            const totalKwh = kwhCharges.reduce((sum, charge) => sum + charge.kwh, 0);

            const paidCharges = appState.charges.filter(c => c.costPerKwh > 0);
            const totalPaidKwh = paidCharges.reduce((sum, c) => sum + c.kwh, 0);
            const totalPaidCost = paidCharges.reduce((sum, c) => sum + (c.kwh * c.costPerKwh), 0);
            const avgCost = totalPaidKwh > 0 ? totalPaidCost / totalPaidKwh : 0;

            animateCountUp(document.getElementById('total-cost'), totalCost, true);
            animateCountUp(document.getElementById('total-kwh'), totalKwh, false, 2);
            animateCountUp(document.getElementById('avg-cost'), avgCost, true, 3);

            // Comparaison dynamique pour "Ce mois"
            const comparisonEl = document.getElementById('cost-comparison');
            if (costPeriod === 'month') {
                const today = new Date();
                const currentDay = today.getDate();
                const currentMonthStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}`;
                const costThisMonth = totalCost; // Already calculated for the month

                const pastMonthsData = {};
                appState.charges.forEach(c => {
                    const chargeMonth = c.date.substring(0, 7);
                    if (chargeMonth !== currentMonthStr) {
                        if (!pastMonthsData[chargeMonth]) {
                            pastMonthsData[chargeMonth] = 0;
                        }
                        if (parseInt(c.date.substring(8, 10)) <= currentDay) {
                             pastMonthsData[chargeMonth] += (c.kwh * c.costPerKwh);
                        }
                    }
                });
                
                const pastMonthsCosts = Object.values(pastMonthsData);
                if (pastMonthsCosts.length > 0) {
                    const avgPastCost = pastMonthsCosts.reduce((a, b) => a + b, 0) / pastMonthsCosts.length;
                    if (avgPastCost > 0) {
                        const diff = ((costThisMonth - avgPastCost) / avgPastCost) * 100;
                        comparisonEl.textContent = `${diff >= 0 ? '+' : ''}${diff.toFixed(0)}% vs moyenne`;
                        comparisonEl.className = `text-xs font-semibold ${diff > 0 ? 'text-red-500' : 'text-green-500'}`;
                    } else {
                        comparisonEl.textContent = '';
                    }
                } else {
                    comparisonEl.textContent = '';
                }
            } else {
                comparisonEl.textContent = '';
            }
            updateMonthlyPrediction();
        }
        function updateMonthlyPrediction() {
    const today = new Date();
    const currentDay = today.getDate();
    const daysInMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate();
    const currentMonthStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}`;
    
    const monthCharges = appState.charges.filter(c => c.date.startsWith(currentMonthStr));
    const costSoFar = monthCharges.reduce((sum, c) => sum + (c.kwh * c.costPerKwh), 0);
    
    if (costSoFar === 0 || currentDay === 0) {
        document.getElementById('monthly-prediction').textContent = '~0,00 €';
        document.getElementById('prediction-detail').textContent = '';
        return;
    }
    
    const avgPerDay = costSoFar / currentDay;
    const prediction = avgPerDay * daysInMonth;
    
    document.getElementById('monthly-prediction').textContent = `~${formatCurrency(prediction)}`;
    document.getElementById('prediction-detail').textContent = `Basé sur ${formatCurrency(avgPerDay)}/jour`;
}
        function getMonthlyData() {
             return appState.charges.reduce((acc, charge) => {
                const month = charge.date.substring(0, 7); // YYYY-MM
                if (!acc[month]) acc[month] = { cost: 0, kwh: 0, avg: 0 };
                acc[month].cost += charge.kwh * charge.costPerKwh;
                acc[month].kwh += charge.kwh;
                return acc;
            }, {});
        }

        function getCostBadge(costPerKwh) {
    if (costPerKwh === 0) return '<span class="text-xs bg-green-500 text-white px-2 py-1 rounded">Gratuit</span>';
    if (costPerKwh < 0.20) return '<span class="text-xs bg-blue-500 text-white px-2 py-1 rounded">Économique</span>';
    if (costPerKwh < 0.35) return '<span class="text-xs bg-yellow-500 text-white px-2 py-1 rounded">Normal</span>';
    return '<span class="text-xs bg-red-500 text-white px-2 py-1 rounded">Coûteux</span>';
}

function checkMilestones() {
    const totalCharges = appState.charges.length;
    const totalKwh = appState.charges.reduce((sum, c) => sum + c.kwh, 0);
    
    if (totalCharges === 50 || totalCharges === 100 || totalCharges === 500) {
        showToast(`🎉 ${totalCharges}e recharge enregistrée !`, 'success');
    }
    if (Math.floor(totalKwh / 1000) > Math.floor((totalKwh - appState.charges[appState.charges.length - 1].kwh) / 1000)) {
        showToast(`⚡ ${Math.floor(totalKwh / 1000)}000 kWh atteints !`, 'success');
    }
}

        function getChartOptions() {
    const isDark = appState.ui.theme === 'dark';
    const gridColor = isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
    const tickColor = isDark ? '#d1d5db' : '#374151';
    const legendColor = isDark ? '#d1d5db' : '#374151';
    
    return {
        bar: { 
            responsive: true, 
            maintainAspectRatio: false, 
            plugins: { 
                legend: { display: false },
                tooltip: {
                    backgroundColor: isDark ? '#1f2937' : '#ffffff',
                    titleColor: isDark ? '#f9fafb' : '#111827',
                    bodyColor: isDark ? '#d1d5db' : '#374151',
                    borderColor: isDark ? '#4b5563' : '#e5e7eb',
                    borderWidth: 1
                }
            }, 
            scales: { 
                y: { beginAtZero: true, grid: { color: gridColor }, ticks: { color: tickColor } }, 
                x: { grid: { display: false }, ticks: { color: tickColor } } 
            } 
        },
        doughnut: { 
            responsive: true, 
            maintainAspectRatio: false, 
            plugins: { 
                legend: { position: 'bottom', labels: { color: legendColor, padding: 15, font: { size: 14 } } } 
            } 
        },
        line: { 
            responsive: true, 
            maintainAspectRatio: false, 
            plugins: { 
                legend: { display: false } 
            }, 
            scales: { 
                y: { beginAtZero: true, grid: { color: gridColor }, ticks: { color: tickColor } }, 
                x: { grid: { display: false }, ticks: { color: tickColor } } 
            } 
        }
    };
}

        function updateMonthlyChart() {
            if (appState.charts.monthly) appState.charts.monthly.destroy();
            const monthlyData = getMonthlyData();
            const sortedMonths = Object.keys(monthlyData).sort();
            const labels = sortedMonths.map(month => parseUTCDate(month).toLocaleString('fr-FR', { month: 'short', year: 'numeric', timeZone: 'UTC' }));
            const costData = sortedMonths.map(month => monthlyData[month].cost);
            const ctx = document.getElementById('monthly-chart').getContext('2d');
            appState.charts.monthly = new Chart(ctx, {
                type: 'bar',
                data: { labels, datasets: [{ label: 'Dépenses Totales (€)', data: costData, backgroundColor: 'rgba(220, 38, 38, 0.6)', borderColor: 'rgba(220, 38, 38, 1)', borderWidth: 1, borderRadius: 4 }] },
                options: getChartOptions().bar
            });
        }

        function updateStationChart() {
    if(appState.charts.station) appState.charts.station.destroy();
    
    const stationData = appState.charges.reduce((acc, charge) => {
        const stationName = charge.station || "Inconnu";
        const provider = stationName.split(' ')[0]; // Prendre le premier mot comme fournisseur
        
        if(!acc[provider]) acc[provider] = 0;
        acc[provider] += charge.kwh * charge.costPerKwh;
        return acc;
    }, {});
    
    const labels = Object.keys(stationData);
    const data = Object.values(stationData);
    
    const ctx = document.getElementById('station-chart').getContext('2d');
    const borderColor = appState.ui.theme === 'dark' ? '#111827' : '#ffffff';
    
    appState.charts.station = new Chart(ctx, {
        type: 'doughnut',
        data: { 
            labels, 
            datasets: [{ 
                label: 'Coût par Fournisseur', 
                data, 
                backgroundColor: ['#DC2626', '#3B82F6', '#10B981', '#F59E0B', '#8B5CF6', '#EC4899'], 
                borderColor: borderColor, 
                borderWidth: 4 
            }] 
        },
        options: getChartOptions().doughnut
    });
}
        
        function updateMonthlyStatsTable() {
    const monthlyStatsBody = document.getElementById('monthly-stats-body');
    monthlyStatsBody.innerHTML = '';
    const monthlyData = getMonthlyData();
    
    let dataArray = Object.keys(monthlyData).map(month => {
        const data = monthlyData[month];
        const monthCharges = appState.charges.filter(c => c.date.substring(0, 7) === month && c.costPerKwh > 0);
        const totalPaidKwh = monthCharges.reduce((sum,c) => sum + c.kwh, 0);
        const avg = totalPaidKwh > 0 ? monthCharges.reduce((sum,c) => sum + (c.kwh*c.costPerKwh), 0) / totalPaidKwh : 0;
        return { month, cost: data.cost, kwh: data.kwh, avg };
    });

    const { key, direction } = appState.sortState.monthlyStats;
    dataArray.sort((a, b) => {
        const valA = a[key];
        const valB = b[key];
        if (valA < valB) return direction === 'asc' ? -1 : 1;
        if (valA > valB) return direction === 'asc' ? 1 : -1;
        return 0;
    });

    const isDesktop = window.innerWidth >= 768;
    
    if (isDesktop) {
        dataArray.forEach(item => {
            const tr = document.createElement('tr');
            tr.className = 'border-b border-gray-200 dark:border-gray-700';
            tr.innerHTML = `
                <td class="p-3 font-semibold">${parseUTCDate(item.month).toLocaleString('fr-FR', { month: 'long', year: 'numeric', timeZone: 'UTC' })}</td>
                <td class="p-3 text-right">${formatCurrency(item.cost)}</td>
                <td class="p-3 text-right">${item.kwh.toFixed(2)} kWh</td>
                <td class="p-3 text-right">${formatCurrency(item.avg)}</td>
            `;
            monthlyStatsBody.appendChild(tr);
        });
    } else {
        dataArray.forEach(item => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td colspan="4" class="p-0">
                    <div class="bg-gray-50 dark:bg-gray-900/50 p-4 mb-2 rounded-lg">
                        <div class="font-bold text-base mb-3 text-gray-900 dark:text-white">${parseUTCDate(item.month).toLocaleString('fr-FR', { month: 'long', year: 'numeric', timeZone: 'UTC' })}</div>
                        <div class="space-y-2 text-sm">
                            <div class="flex justify-between">
                                <span class="text-gray-500 dark:text-gray-400">Coût Total</span>
                                <span class="font-bold text-gray-900 dark:text-white">${formatCurrency(item.cost)}</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-500 dark:text-gray-400">Total kWh</span>
                                <span class="font-bold text-gray-900 dark:text-white">${item.kwh.toFixed(2)} kWh</span>
                            </div>
                            <div class="flex justify-between border-t border-gray-200 dark:border-gray-700 pt-2">
                                <span class="text-gray-500 dark:text-gray-400">Coût/kWh Moyen</span>
                                <span class="font-bold text-gray-900 dark:text-white">${formatCurrency(item.avg)}</span>
                            </div>
                        </div>
                    </div>
                </td>
            `;
            monthlyStatsBody.appendChild(tr);
        });
    }
}
        
        function getPerformanceData() {
            const sortedStats = [...appState.monthlyStats].sort((a,b) => a.month.localeCompare(b.month));
            const chargeData = getMonthlyData();
            
            return sortedStats.map((stat, index) => {
                const prevStat = sortedStats[index - 1];
                const kmDriven = prevStat ? stat.endOfMonthMileage - prevStat.endOfMonthMileage : 0;
                const monthKwh = chargeData[stat.month.substring(0, 7)]?.kwh || 0;
                const kmPerKwh = kmDriven > 0 && monthKwh > 0 ? kmDriven / monthKwh : 0;
                
                return { month: stat.month, kmDriven, kmPerKwh };
            });
        }

        function updateEfficiencyChart() {
            if(appState.charts.efficiency) appState.charts.efficiency.destroy();
            const performanceData = getPerformanceData();
            const labels = performanceData.map(stat => parseUTCDate(stat.month).toLocaleString('fr-FR', { month: 'short', year: 'numeric', timeZone: 'UTC' }));
            const data = performanceData.map(stat => stat.kmPerKwh);
            const ctx = document.getElementById('efficiency-chart').getContext('2d');
            appState.charts.efficiency = new Chart(ctx, {
                type: 'line',
                data: { labels, datasets: [{ label: 'Km / kWh', data, backgroundColor: 'rgba(220, 38, 38, 0.2)', borderColor: 'rgba(220, 38, 38, 1)', borderWidth: 2, tension: 0.3, fill: true, pointBackgroundColor: appState.ui.theme === 'dark' ? '#fff' : '#111827', pointBorderColor: '#DC2626' }] },
                options: getChartOptions().line
            });
        }

        function updateEfficiencyTable() {
            const efficiencyStatsBody = document.getElementById('efficiency-stats-body');
            efficiencyStatsBody.innerHTML = '';
            let performanceData = getPerformanceData();

            const { key, direction } = appState.sortState.efficiencyStats;
            performanceData.sort((a, b) => {
                const valA = a[key];
                const valB = b[key];
                if (valA < valB) return direction === 'asc' ? -1 : 1;
                if (valA > valB) return direction === 'asc' ? 1 : -1;
                return 0;
            });
            
            if (performanceData.length === 0) {
                 efficiencyStatsBody.innerHTML = `<tr><td colspan="3" class="text-center p-8 text-gray-500">Aucune donnée de kilométrage.</td></tr>`;
                 return;
            }

            performanceData.forEach(stat => {
                const tr = document.createElement('tr');
                tr.className = 'border-b border-gray-200 dark:border-gray-700 text-sm';
                const monthShort = parseUTCDate(stat.month).toLocaleString('fr-FR', { month: 'short', year: '2-digit', timeZone: 'UTC' });
                tr.innerHTML = `
                    <td class="p-2 sm:p-3 font-semibold whitespace-nowrap">${monthShort}</td>
                    <td class="p-2 sm:p-3 text-right whitespace-nowrap">${stat.kmDriven > 0 ? stat.kmDriven : '-'}</td>
                    <td class="p-2 sm:p-3 text-right font-bold text-gray-900 dark:text-white whitespace-nowrap">${stat.kmPerKwh > 0 ? stat.kmPerKwh.toFixed(2) : '-'}</td>
                `;
                efficiencyStatsBody.appendChild(tr);
            });
        }
        
        async function handleChargeFormSubmit(e) {
            e.preventDefault();
            if (!appState.firebase.userId) return showToast("Veuillez vous connecter d'abord.", "error");

            const chargeId = document.getElementById('charge-id').value;
            const chargeData = {
                date: document.getElementById('date').value,
                station: document.getElementById('station').value.trim() || 'Inconnu',
                kwh: parseFloat(document.getElementById('kwh').value),
                costPerKwh: parseFloat(document.getElementById('cost-per-kwh').value),
                note: document.getElementById('note').value.trim() || null,
                photo: currentPhotoBase64 || null,
                latitude: document.getElementById('latitude').value || null,
                longitude: document.getElementById('longitude').value || null
            };
            if(chargeData.kwh < 0 || chargeData.costPerKwh < 0) {
                showToast("Les valeurs de kWh et de coût doivent être positives.", "error");
                return;
            }

            try {
                if (chargeId) {
                    const docRef = doc(appState.firebase.db, `users/${appState.firebase.userId}/charges`, chargeId);
                    await updateDoc(docRef, chargeData);
                    showToast("Recharge modifiée.");
                } else {
                    const collectionRef = collection(appState.firebase.db, `users/${appState.firebase.userId}/charges`);
                    await addDoc(collectionRef, chargeData);
                    showToast("Recharge ajoutée.");
                }
                closeModal();
            } catch (error) {
                console.error("Error saving charge:", error);
                showToast("Erreur lors de la sauvegarde.", "error");
            }
        }

        async function handleQuickAdd(e) {
            e.preventDefault();
            if (!appState.firebase.userId) return showToast("Veuillez vous connecter d'abord.", "error");
            
            const stationInput = document.getElementById('quick-station');
            const kwhInput = document.getElementById('quick-kwh');
            const costInput = document.getElementById('quick-cost-per-kwh');
            
            const kwh = parseFloat(kwhInput.value);
            const costPerKwh = parseFloat(costInput.value);

            if (isNaN(kwh) || isNaN(costPerKwh) || kwh < 0 || costPerKwh < 0) {
                showToast("Veuillez entrer des valeurs valides et positives.", "error");
                return;
            }

            const newCharge = {
                date: getTodayAsYYYYMMDD(),
                station: stationInput.value.trim() || 'Inconnu',
                kwh,
                costPerKwh,
            };

            try {
                const collectionRef = collection(appState.firebase.db, `users/${appState.firebase.userId}/charges`);
                await addDoc(collectionRef, newCharge);
                quickAddForm.reset();
                showToast("Recharge rapide ajoutée.");
            } catch (error) {
                console.error("Error saving quick charge:", error);
                showToast("Erreur lors de la sauvegarde.", "error");
            }
        }
        
        async function handleMileageSubmit(e) {
            e.preventDefault();
            if (!appState.firebase.userId) return showToast("Veuillez vous connecter d'abord.", "error");
            
            const mileageInput = document.getElementById('current-mileage');
            const mileage = parseInt(mileageInput.value);
            const monthValue = mileageMonthSelect.value; // Correctly gets "YYYY-MM-DD"

            if (isNaN(mileage) || mileage < 0) {
                showToast("Veuillez entrer un kilométrage valide et positif.", "error");
                return;
            }

            const docId = monthValue; // Use YYYY-MM-DD as doc ID
            const docData = { month: monthValue, endOfMonthMileage: mileage };
            
            try {
                const docRef = doc(appState.firebase.db, `users/${appState.firebase.userId}/monthlyStats`, docId);
                await setDoc(docRef, docData); // setDoc will create or overwrite
                showToast("Kilométrage enregistré !");
            } catch (error) {
                 console.error("Error saving mileage:", error);
                showToast("Erreur lors de la sauvegarde.", "error");
            }
        }
        
        function populateMileageMonthSelect() {
            mileageMonthSelect.innerHTML = '';
            const today = new Date();
            const currentYear = today.getUTCFullYear();
            const currentMonth = today.getUTCMonth();

            for (let i = 0; i < 24; i++) {
                const date = new Date(Date.UTC(currentYear, currentMonth - i, 1));
                const year = date.getUTCFullYear();
                const month = String(date.getUTCMonth() + 1).padStart(2, '0');
                
                const option = document.createElement('option');
                const dateValue = `${year}-${month}-01`;
                option.value = dateValue;
                option.textContent = date.toLocaleString('fr-FR', { month: 'long', year: 'numeric', timeZone: 'UTC' });
                mileageMonthSelect.appendChild(option);
            }
            updateMileageForm();
        }

        function updateMileageForm() {
            const selectedMonth = mileageMonthSelect.value.substring(0, 7);
            const existingStat = appState.monthlyStats.find(s => s.month.substring(0, 7) === selectedMonth);
            document.getElementById('current-mileage').value = existingStat ? existingStat.endOfMonthMileage : '';
        }

        function populateFavoriteButtons() {
            const quickAddContainer = document.getElementById('quick-add-favorites');
            quickAddContainer.innerHTML = '';

            appState.favoriteStations.forEach(station => {
                const btn = document.createElement('button');
                btn.type = 'button';
                btn.className = 'favorite-btn bg-gray-200 dark:bg-gray-700 hover:bg-red-600 hover:text-white dark:hover:bg-red-700 text-xs font-bold py-1 px-3 rounded-full';
                btn.textContent = station.name;
btn.onclick = () => {
    document.getElementById('quick-station').value = station.name;
    document.getElementById('quick-cost-per-kwh').value = station.cost;
    updateQuickAddCost();
};
                quickAddContainer.appendChild(btn);
            });
        }

        function populateFavoriteSelect() {
            modalFavoritesSelect.innerHTML = '<option value="">Sélectionner un favori...</option>';
            appState.favoriteStations.forEach(station => {
                const option = document.createElement('option');
                option.value = station.name;
                option.textContent = `${station.name} (${formatCurrency(station.cost)}/kWh)`;
                option.dataset.cost = station.cost;
                modalFavoritesSelect.appendChild(option);
            });
        }
        
        function renderFavoritesList() {
    favoritesList.innerHTML = '';
    if (appState.favoriteStations.length === 0) {
        favoritesList.innerHTML = `<li class="text-center p-4 text-gray-500">Aucune borne favorite.</li>`;
        return;
    }
    
    appState.favoriteStations.forEach(station => {
        const hasLocation = station.latitude && station.longitude;
        const mapsUrl = hasLocation ? `https://www.google.com/maps/dir/?api=1&destination=${station.latitude},${station.longitude}` : null;
        const wazeUrl = hasLocation ? `https://waze.com/ul?ll=${station.latitude},${station.longitude}&navigate=yes` : null;
        
        const li = document.createElement('li');
        li.className = 'flex justify-between items-center bg-gray-100 dark:bg-gray-900/50 p-3 rounded-lg';
        li.innerHTML = `
            <div class="flex-grow">
                <p class="font-semibold text-gray-900 dark:text-white">${station.name}</p>
                <p class="text-sm text-gray-600 dark:text-gray-400">${formatCurrency(station.cost)} / kWh</p>
                ${hasLocation ? `
    <button onclick="openNavigation(${station.latitude}, ${station.longitude}, '${station.name}')" class="md:hidden text-blue-600 hover:text-blue-700 p-2" title="Naviguer">
        <i class="fas fa-directions text-lg"></i>
    </button>
` : ''}
            </div>
            <div class="flex gap-3">
                <button class="edit-favorite-btn text-blue-500 hover:text-blue-400" data-id="${station.id}"><i class="fas fa-pencil-alt"></i></button>
                <button class="delete-favorite-btn text-red-500 hover:text-red-400" data-id="${station.id}"><i class="fas fa-trash-alt"></i></button>
            </div>
        `;
        favoritesList.appendChild(li);
    });
    
    favoritesList.querySelectorAll('.edit-favorite-btn').forEach(btn => btn.addEventListener('click', handleEditFavorite));
    favoritesList.querySelectorAll('.delete-favorite-btn').forEach(btn => btn.addEventListener('click', handleDeleteFavorite));
}
        
            function renderVisitedStations() {
    const visitedList = document.getElementById('visited-stations-list');
    visitedList.innerHTML = '';
    
    if (appState.charges.length === 0) {
        visitedList.innerHTML = `<li class="text-center p-8 text-gray-500">Aucune borne visitée pour le moment.</li>`;
        return;
    }
    
    // Grouper par nom de borne
    const stationStats = appState.charges.reduce((acc, charge) => {
        const name = charge.station || 'Inconnu';
        if (!acc[name]) {
            acc[name] = {
                name,
                visits: 0,
                totalCost: 0,
                totalKwh: 0,
                lastVisit: charge.date,
                latitude: charge.latitude || null,
                longitude: charge.longitude || null,
                hasPhoto: false
            };
        }
        acc[name].visits++;
        acc[name].totalCost += charge.kwh * charge.costPerKwh;
        acc[name].totalKwh += charge.kwh;
        if (charge.date > acc[name].lastVisit) {
            acc[name].lastVisit = charge.date;
            // Prendre les coordonnées de la visite la plus récente
            if (charge.latitude && charge.longitude) {
                acc[name].latitude = charge.latitude;
                acc[name].longitude = charge.longitude;
            }
        }
        if (charge.photo) acc[name].hasPhoto = true;
        return acc;
    }, {});
    
    // Convertir en array et trier par nombre de visites
    let stations = Object.values(stationStats);

// Tri selon la préférence
if (appState.sortState.visitedStations === 'alpha') {
    stations.sort((a, b) => a.name.localeCompare(b.name));
} else {
    stations.sort((a, b) => b.visits - a.visits);
}
    
    stations.forEach(station => {
        const avgCost = station.totalKwh > 0 ? station.totalCost / station.totalKwh : 0;
        const hasLocation = station.latitude && station.longitude;
        const mapsUrl = hasLocation ? `https://www.google.com/maps/dir/?api=1&destination=${station.latitude},${station.longitude}` : null;
        const wazeUrl = hasLocation ? `https://waze.com/ul?ll=${station.latitude},${station.longitude}&navigate=yes` : null;
        const isFavorite = appState.favoriteStations.some(fav => fav.name === station.name);
        
const li = document.createElement('li');
li.className = 'bg-gray-100 dark:bg-gray-900/50 p-4 rounded-lg';
li.innerHTML = `
    <div class="flex justify-between items-start gap-3">
        <div class="flex-grow min-w-0">
            <h4 class="font-bold text-gray-900 dark:text-white text-lg mb-3">${station.name}</h4>
            <div class="grid grid-cols-2 gap-x-4 gap-y-2 text-sm">
                <div>
                    <span class="text-gray-500 dark:text-gray-400 block">Visites</span>
                    <span class="font-semibold text-gray-900 dark:text-white">${station.visits}</span>
                </div>
                <div>
                    <span class="text-gray-500 dark:text-gray-400 block">Coût moyen</span>
                    <span class="font-semibold text-gray-900 dark:text-white">${formatCurrency(avgCost)}/kWh</span>
                </div>
                <div>
                    <span class="text-gray-500 dark:text-gray-400 block">Total dépensé</span>
                    <span class="font-semibold text-gray-900 dark:text-white">${formatCurrency(station.totalCost)}</span>
                </div>
                <div>
                    <span class="text-gray-500 dark:text-gray-400 block">Dernière visite</span>
                    <span class="font-semibold text-gray-900 dark:text-white">${parseUTCDate(station.lastVisit).toLocaleDateString('fr-FR', { day: 'numeric', month: 'short', timeZone: 'UTC' })}</span>
                </div>
            </div>
        </div>
        <div class="flex flex-col gap-2 flex-shrink-0">
            <button class="edit-visited-btn text-blue-500 hover:text-blue-600" data-name="${station.name}" data-cost="${avgCost.toFixed(3)}" data-lat="${station.latitude || ''}" data-lng="${station.longitude || ''}" title="Modifier cette borne">
                <i class="fas fa-pencil-alt text-lg"></i>
            </button>
            <button class="add-to-favorites-btn transition-colors ${isFavorite ? 'text-yellow-500' : 'text-gray-300 hover:text-yellow-500'}" data-name="${station.name}" data-cost="${avgCost.toFixed(3)}" data-lat="${station.latitude || ''}" data-lng="${station.longitude || ''}" data-is-favorite="${isFavorite}">
                <i class="${isFavorite ? 'fas' : 'far'} fa-star text-xl"></i>
            </button>
            ${hasLocation ? `
                <button onclick="openNavigation(${station.latitude}, ${station.longitude}, '${station.name}')" class="md:hidden text-blue-600 hover:text-blue-700" title="Naviguer">
                    <i class="fas fa-directions text-lg"></i>
                </button>
            ` : ''}
        `;
        visitedList.appendChild(li);
    });
    
    // Ajouter les event listeners pour les boutons "Ajouter aux favoris"
        visitedList.querySelectorAll('.add-to-favorites-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
        const isFav = btn.dataset.isFavorite === 'true';
        const name = btn.dataset.name;
        const icon = btn.querySelector('i');
        
        // Animation
        icon.classList.add('star-animate');
        setTimeout(() => icon.classList.remove('star-animate'), 300);
        
        try {
            if (isFav) {
                // Retirer des favoris
                const favoriteToRemove = appState.favoriteStations.find(fav => fav.name === name);
                if (favoriteToRemove) {
                    const docRef = doc(appState.firebase.db, `users/${appState.firebase.userId}/favoriteStations`, favoriteToRemove.id);
                    await deleteDoc(docRef);
                    showToast(`"${name}" retiré des favoris`);
                }
            } else {
                // Ajouter aux favoris
                const cost = parseFloat(btn.dataset.cost);
                const lat = btn.dataset.lat;
                const lng = btn.dataset.lng;
                
                const favData = { 
                    name, 
                    cost,
                    latitude: lat || null,
                    longitude: lng || null
                };
                
                const collectionRef = collection(appState.firebase.db, `users/${appState.firebase.userId}/favoriteStations`);
                await addDoc(collectionRef, favData);
                showToast(`"${name}" ajouté aux favoris`);
            }
        } catch (error) {
            console.error("Error toggling favorite:", error);
            showToast("Erreur lors de la modification", "error");
        }
    });
});

// Event listeners pour éditer les bornes visitées
visitedList.querySelectorAll('.edit-visited-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const name = btn.dataset.name;
        const lat = btn.dataset.lat;
        const lng = btn.dataset.lng;
        
        document.getElementById('edit-visited-old-name').value = name;
        document.getElementById('edit-visited-name').value = name;
        document.getElementById('edit-visited-latitude').value = lat;
        document.getElementById('edit-visited-longitude').value = lng;
        document.getElementById('edit-visited-maps-link').value = '';
        document.getElementById('edit-visited-status').textContent = '';
        
        if (lat && lng) {
            document.getElementById('edit-visited-status').textContent = `✓ Position actuelle: ${lat}, ${lng}`;
            document.getElementById('edit-visited-status').className = 'text-xs mt-1 text-green-600 dark:text-green-400';
        }
        
        document.getElementById('edit-visited-modal').classList.remove('hidden');
    });
});

}

        function renderMileageList() {
            mileageList.innerHTML = '';
            if (appState.monthlyStats.length === 0) {
                mileageList.innerHTML = `<li class="text-center p-4 text-gray-500">Aucun kilométrage encodé.</li>`;
                return;
            }

            const sortedStats = [...appState.monthlyStats].sort((a,b) => b.month.localeCompare(a.month));

            sortedStats.forEach(stat => {
                const li = document.createElement('li');
                li.className = 'flex justify-between items-center bg-gray-100 dark:bg-gray-900/50 p-3 rounded-lg swipe-container';
                li.innerHTML = `
                    <div class="swipe-actions">
                         <button class="delete-mileage-btn h-full bg-red-600 text-white px-6" data-month="${stat.month}"><i class="fas fa-trash-alt"></i></button>
                    </div>
                    <div class="swipe-content bg-white dark:bg-gray-800 p-3 rounded-lg flex justify-between items-center w-full">
                        <div>
                            <p class="font-semibold text-gray-900 dark:text-white">${parseUTCDate(stat.month).toLocaleString('fr-FR', { month: 'long', year: 'numeric', timeZone: 'UTC' })}</p>
                            <p class="text-sm text-gray-600 dark:text-gray-400">${stat.endOfMonthMileage} km</p>
                        </div>
                        <button class="edit-mileage-btn text-blue-500 hover:text-blue-400" data-month="${stat.month}"><i class="fas fa-pencil-alt"></i></button>
                    </div>
                `;
                mileageList.appendChild(li);
            });

            mileageList.querySelectorAll('.edit-mileage-btn').forEach(btn => btn.addEventListener('click', handleEditMileage));
            mileageList.querySelectorAll('.delete-mileage-btn').forEach(btn => btn.addEventListener('click', handleDeleteMileage));
            mileageList.querySelectorAll('.swipe-container').forEach(addSwipeToDelete);
        }

        function extractCoordsFromMapsLink(url) {
    if (!url) return null;
    
    // Format: https://www.google.com/maps/@50.8203,4.3924,17z
    // Format: https://www.google.com/maps/place/.../@50.8203,4.3924,17z
    // Format: https://maps.app.goo.gl/... (ne fonctionne pas directement)
    
    const patterns = [
        /@(-?\d+\.\d+),(-?\d+\.\d+)/,  // Standard format
        /!3d(-?\d+\.\d+)!4d(-?\d+\.\d+)/, // Alternative format
        /query=(-?\d+\.\d+),(-?\d+\.\d+)/ // Query format
    ];
    
    for (const pattern of patterns) {
        const match = url.match(pattern);
        if (match) {
            return {
                latitude: parseFloat(match[1]),
                longitude: parseFloat(match[2])
            };
        }
    }
    
    return null;
}

        async function handleFavoriteFormSubmit(e) {
            e.preventDefault();
            if (!appState.firebase.userId) return showToast("Veuillez vous connecter d'abord.", "error");

            const id = document.getElementById('favorite-id').value;
            const name = document.getElementById('favorite-name').value;
            const cost = parseFloat(document.getElementById('favorite-cost').value);

            if (!name || isNaN(cost) || cost < 0) {
                 showToast("Veuillez entrer un nom et un coût positif valide.", "error");
                return;
            }

            const latitude = document.getElementById('favorite-latitude').value;
const longitude = document.getElementById('favorite-longitude').value;
const favData = { 
    name, 
    cost,
    latitude: latitude || null,
    longitude: longitude || null
};

            try {
                if (id) { // Editing
                    const docRef = doc(appState.firebase.db, `users/${appState.firebase.userId}/favoriteStations`, id);
                    await updateDoc(docRef, favData);
                    showToast("Favori modifié.");
                } else { // Adding
                    const collectionRef = collection(appState.firebase.db, `users/${appState.firebase.userId}/favoriteStations`);
                    await addDoc(collectionRef, favData);
                    showToast("Nouveau favori ajouté.");
                }
                favoriteStationForm.reset();
                document.getElementById('favorite-id').value = '';
                document.getElementById('favorite-form-btn-text').textContent = 'Ajouter';
            } catch (error) {
                console.error("Error saving favorite:", error);
                showToast("Erreur lors de la sauvegarde.", "error");
            }
        }
        
        function handleEditFavorite(e) {
    const id = e.currentTarget.dataset.id;
    const station = appState.favoriteStations.find(s => s.id == id);
    if (!station) return;

    document.getElementById('edit-favorite-id').value = station.id;
    document.getElementById('edit-favorite-name').value = station.name;
    document.getElementById('edit-favorite-cost').value = station.cost;
    document.getElementById('edit-favorite-latitude').value = station.latitude || '';
    document.getElementById('edit-favorite-longitude').value = station.longitude || '';
    document.getElementById('edit-favorite-maps-link').value = '';
    document.getElementById('edit-maps-link-status').textContent = '';
    
    if (station.latitude && station.longitude) {
        document.getElementById('edit-maps-link-status').textContent = `✓ Position: ${station.latitude}, ${station.longitude}`;
        document.getElementById('edit-maps-link-status').className = 'text-xs mt-1 text-green-600 dark:text-green-400';
    }
    
    document.getElementById('edit-favorite-modal').classList.remove('hidden');
}

        function handleDeleteFavorite(e) {
            const id = e.currentTarget.dataset.id;
            const stationName = appState.favoriteStations.find(s=>s.id==id)?.name || "ce favori";
            openConfirmModal('Supprimer ce favori ?', `Voulez-vous vraiment supprimer "${stationName}" ?`, () => {
                const docRef = doc(appState.firebase.db, `users/${appState.firebase.userId}/favoriteStations`, id);
                deleteDoc(docRef);
                showToast("Favori supprimé.");
            });
        }
        
        function handleEditMileage(e) {
            const month = e.currentTarget.dataset.month;
            mileageMonthSelect.value = month;
            updateMileageForm();
            document.getElementById('current-mileage').focus();
        }

        function handleDeleteMileage(e) {
            const month = e.currentTarget.dataset.month;
            const monthName = parseUTCDate(month).toLocaleString('fr-FR', { month: 'long', year: 'numeric', timeZone: 'UTC' });
            openConfirmModal('Supprimer ce kilométrage ?', `Voulez-vous vraiment supprimer les données pour ${monthName} ?`, () => {
                const docRef = doc(appState.firebase.db, `users/${appState.firebase.userId}/monthlyStats`, month);
                deleteDoc(docRef);
                showToast("Données de kilométrage supprimées.");
            });
        }

        function checkMileageReminder() {
            const today = new Date();
            const tomorrow = new Date();
            tomorrow.setDate(today.getDate() + 1);
            const isLastDayOfMonth = tomorrow.getDate() === 1;
            const currentMonthStr = today.toISOString().substring(0, 7);

            if (!isLastDayOfMonth) return;
            
            try {
                const reminderDismissed = localStorage.getItem('mileageReminder_' + currentMonthStr);
                if (reminderDismissed) return;
            } catch (e) { /* ignore */ }


            const mileageEntered = appState.monthlyStats.some(s => s.month.substring(0, 7) === currentMonthStr);
            if (mileageEntered) return;
            
            reminderBanner.classList.remove('hidden');
        }

        function exportAllData() {
            if (appState.charges.length === 0 && appState.monthlyStats.length === 0) {
                showToast("Aucune donnée à exporter.", "error");
                return;
            }

            const zip = new JSZip();

            if (appState.charges.length > 0) {
                const chargesToExport = appState.charges.map(({ id, ...rest }) => rest);
                const chargesCsv = Papa.unparse(chargesToExport);
                zip.file("recharges.csv", chargesCsv);
            }

            if (appState.monthlyStats.length > 0) {
                const mileageCsv = Papa.unparse(appState.monthlyStats);
                zip.file("kilometrages.csv", mileageCsv);
            }

            zip.generateAsync({ type: "blob" })
                .then(function(content) {
                    const link = document.createElement("a");
                    const url = URL.createObjectURL(content);
                    link.setAttribute("href", url);
                    link.setAttribute("download", "tesla_export.zip");
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    URL.revokeObjectURL(url);
                });
        }

        function handleFileImport(event, type) {
            const file = event.target.files[0];
            if (!file) return;
            showLoader(true);

            Papa.parse(file, {
                header: true, skipEmptyLines: true,
                complete: (results) => {
                    setTimeout(async () => {
                        try {
                            if (results.errors.length > 0) throw new Error("Le fichier CSV semble malformé.");
                            
                            if (type === 'recharges') {
                                const newCharges = results.data.map((row, index) => {
                                    const kwh = parseFloat(String(row.kwh || '').replace(',', '.'));
                                    const costPerKwh = parseFloat(String(row.costPerKwh || '').replace(',', '.'));
                                    if (!row.date || !row.station || isNaN(kwh) || isNaN(costPerKwh) || kwh < 0 || costPerKwh < 0) throw new Error(`Ligne ${index + 2} invalide.`);
                                    const chargeDate = new Date(row.date);
                                    if (isNaN(chargeDate.getTime())) throw new Error(`Ligne ${index + 2}: Date invalide.`);
                                    return { date: chargeDate.toISOString().split('T')[0], station: row.station, kwh, costPerKwh };
                                });
                                
                                const collectionRef = collection(appState.firebase.db, `users/${appState.firebase.userId}/charges`);
                                const snapshot = await getDocs(collectionRef);
                                for(const docSnap of snapshot.docs) { await deleteDoc(docSnap.ref); }
                                for(const charge of newCharges) { await addDoc(collectionRef, charge); }
                                showToast('Importation des recharges réussie !');

                            } else if (type === 'mileage') {
                                const newStats = results.data.map((row, index) => {
                                    const mileage = parseInt(row.endOfMonthMileage);
                                    if (!row.month || isNaN(mileage) || mileage < 0) throw new Error(`Ligne ${index + 2} invalide.`);
                                    const date = new Date(row.month);
                                    if (isNaN(date.getTime())) throw new Error(`Ligne ${index + 2}: Date invalide.`);
                                    return { month: date.toISOString().split('T')[0], endOfMonthMileage: mileage };
                                });

                                const collectionRef = collection(appState.firebase.db, `users/${appState.firebase.userId}/monthlyStats`);
                                const snapshot = await getDocs(collectionRef);
                                for(const docSnap of snapshot.docs) { await deleteDoc(docSnap.ref); }
                                for(const stat of newStats) { await setDoc(doc(collectionRef, stat.month), stat); }
                                showToast('Importation des kilométrages réussie !');
                            }
                        } catch (error) {
                            showToast(`Erreur d'importation: ${error.message}`, "error");
                        } finally {
                            event.target.value = '';
                            showLoader(false);
                        }
                    }, 500);
                },
                error: (err) => {
                     showToast(`Erreur de lecture: ${err.message}`, "error");
                     showLoader(false);
                }
            });
        }
        
        function updateAllTabs() {
            updateDashboard();
            updateHistoryTab();
            updateStatsTab();
            updateEfficiencyTab();
            renderFavoritesList();
            renderVisitedStations();
            renderMileageList();
        }

        function updateDashboard() {
            checkMilestones();
            updateStats();
            renderRecentCharges();
            if (appState.ui.activeTab === 'accueil') updateMonthlyChart();
        }
        function updateHistoryTab() {
            const activeFilter = document.querySelector('#date-filters .active').dataset.filter;
            renderChargesAccordion(searchHistoryInput.value, activeFilter);
        }
        function updateStatsTab() {
            updateStationChart();
            updateMonthlyStatsTable();
        }
        function updateEfficiencyTab() {
            renderMileageList();
            updateEfficiencyChart();
            updateEfficiencyTable();
        }

        function redrawVisibleChart() {
            switch(appState.ui.activeTab) {
                case 'accueil': if (appState.charts.monthly) updateMonthlyChart(); break;
                case 'statistiques': if (appState.charts.station) updateStationChart(); break;
                case 'efficacite': if (appState.charts.efficiency) updateEfficiencyChart(); break;
            }
        }

        function addSwipeToDelete(el) {
            let startX, currentX, isSwiping = false;
            const content = el.querySelector('.swipe-content');
            
            const handleGestureStart = (e) => {
                startX = e.touches ? e.touches[0].clientX : e.clientX;
                isSwiping = true;
                content.style.transition = 'none';
            };
            const handleGestureMove = (e) => {
                if (!isSwiping) return;
                currentX = e.touches ? e.touches[0].clientX : e.clientX;
                const diff = currentX - startX;
                if (diff < 0 && diff > -100) { // Swipe left only
                    content.style.transform = `translateX(${diff}px)`;
                }
            };
            const handleGestureEnd = () => {
                if (!isSwiping) return;
                isSwiping = false;
                content.style.transition = 'transform 0.3s ease-out';
                const diff = currentX - startX;
                if (diff < -50) { // Threshold
                    content.style.transform = 'translateX(-80px)'; // Expose delete button
                } else {
                    content.style.transform = 'translateX(0)';
                }
            };

            content.addEventListener('touchstart', handleGestureStart, { passive: true });
            content.addEventListener('touchmove', handleGestureMove, { passive: true });
            content.addEventListener('touchend', handleGestureEnd);
        }
        
        
        // --- Event Listeners ---
        function initializeEventListeners() {
            const handleTabClick = (tabName) => {
                appState.ui.activeTab = tabName;
    
                [...tabs, ...sideMenuLinks, ...bottomNavBtns].forEach(link => {
        link.classList.toggle('active', link.dataset.tab === tabName);
    });

    tabPanes.forEach(pane => pane.classList.toggle('hidden', pane.id !== tabName));
                
                switch(appState.ui.activeTab) {
                    case 'accueil': updateDashboard(); break;
                    case 'historique': updateHistoryTab(); break;
                    case 'statistiques': updateStatsTab(); break;
                    case 'efficacite': updateEfficiencyTab(); break;
                    case 'bornes': 
    renderFavoritesList(); 
    renderVisitedStations();
    break;
                }
            };
            
            const bottomNavBtns = document.querySelectorAll('.bottom-nav-btn');

            tabs.forEach(tab => tab.addEventListener('click', () => handleTabClick(tab.dataset.tab)));
            sideMenuLinks.forEach(link => link.addEventListener('click', () => handleTabClick(link.dataset.tab)));
            bottomNavBtns.forEach(btn => btn.addEventListener('click', () => handleTabClick(btn.dataset.tab)));

            // Widget coût total cliquable
            document.getElementById('total-cost-widget')?.addEventListener('click', () => handleTabClick('historique'));


            fab.addEventListener('click', () => openModal());
            cancelBtn.addEventListener('click', closeModal);
            modalOverlay.addEventListener('click', closeModal);
            deleteBtnModal.addEventListener('click', () => {
                const chargeId = document.getElementById('charge-id').value;
                if(chargeId) {
                    handleDelete(new Event('click'), chargeId);
                    closeModal();
                }
            });
            chargeForm.addEventListener('submit', handleChargeFormSubmit);
            quickAddForm.addEventListener('submit', handleQuickAdd);
            mileageForm.addEventListener('submit', handleMileageSubmit);
            exportAllBtn.addEventListener('click', exportAllData);
            importRechargesBtn.addEventListener('click', () => importInputRecharges.click());
            importInputRecharges.addEventListener('change', (e) => handleFileImport(e, 'recharges'));
            importMileageBtn.addEventListener('click', () => importInputMileage.click());
            importInputMileage.addEventListener('change', (e) => handleFileImport(e, 'mileage'));
            closeReminderBtn.addEventListener('click', () => {
                const today = new Date();
                const currentMonthStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}`;
                try {
                    localStorage.setItem('mileageReminder_' + currentMonthStr, 'dismissed');
                } catch(e) { console.warn("Could not save reminder dismissal to localStorage:", e); }
                reminderBanner.classList.add('hidden');
            });
            mileageMonthSelect.addEventListener('change', updateMileageForm);
            themeToggle.addEventListener('click', toggleTheme);
            document.querySelectorAll('input[name="theme"]').forEach(radio => {
                radio.addEventListener('change', (e) => applyTheme(e.target.value));
            });
            favoriteStationForm.addEventListener('submit', handleFavoriteFormSubmit);
            searchHistoryInput.addEventListener('input', (e) => updateHistoryTab());
            document.getElementById('date-filters').addEventListener('click', (e) => {
                if (e.target.matches('.date-filter-btn')) {
                    document.querySelectorAll('.date-filter-btn').forEach(btn => btn.classList.remove('active'));
                    e.target.classList.add('active');
                    updateHistoryTab();
                }
            });

            document.getElementById('cost-period-select').addEventListener('change', updateStats);
            document.getElementById('kwh-period-select').addEventListener('change', updateStats);

            document.querySelector('#statistiques thead').addEventListener('click', (e) => {
                const th = e.target.closest('th');
                if (th && th.dataset.sort) handleSort('monthlyStats', th.dataset.sort, th);
            });
             document.querySelector('#efficacite thead').addEventListener('click', (e) => {
                const th = e.target.closest('th');
                if (th && th.dataset.sort) handleSort('efficiencyStats', th.dataset.sort, th);
            });

            deleteAllDataBtn.addEventListener('click', () => {
                openConfirmModal('Supprimer toutes les données ?', 'Ceci effacera l\'historique des recharges et des kilométrages. Vos bornes favorites seront conservées.', async () => {
                    const chargesRef = collection(appState.firebase.db, `users/${appState.firebase.userId}/charges`);
                    const mileageRef = collection(appState.firebase.db, `users/${appState.firebase.userId}/monthlyStats`);
                    const chargesSnap = await getDocs(chargesRef);
                    const mileageSnap = await getDocs(mileageRef);
                    for(const docSnap of chargesSnap.docs) { await deleteDoc(docSnap.ref); }
                    for(const docSnap of mileageSnap.docs) { await deleteDoc(docSnap.ref); }
                    showToast("Toutes les données ont été supprimées.");
                });
            });

            modalFavoritesSelect.addEventListener('change', (e) => {
                const selectedOption = e.target.options[e.target.selectedIndex];
                if (!selectedOption.value) return;

                document.getElementById('station').value = selectedOption.value;
                document.getElementById('cost-per-kwh').value = selectedOption.dataset.cost;
            });

            confirmModalCancel.addEventListener('click', closeConfirmModal);
            confirmModalConfirm.addEventListener('click', () => {
                if (confirmCallback) confirmCallback();
                closeConfirmModal();
            });

// Modal d'édition de borne visitée
document.getElementById('cancel-edit-visited').addEventListener('click', () => {
    document.getElementById('edit-visited-modal').classList.add('hidden');
});

document.getElementById('edit-visited-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    showLoader(true);
    
    const oldName = document.getElementById('edit-visited-old-name').value;
    const newName = document.getElementById('edit-visited-name').value;
    const newLat = document.getElementById('edit-visited-latitude').value;
    const newLng = document.getElementById('edit-visited-longitude').value;
    
    try {
        // Récupérer toutes les recharges avec l'ancien nom
        const chargesRef = collection(appState.firebase.db, `users/${appState.firebase.userId}/charges`);
        const snapshot = await getDocs(chargesRef);
        
        let updateCount = 0;
        const updates = [];
        
        snapshot.docs.forEach(docSnap => {
            const charge = docSnap.data();
            if (charge.station === oldName) {
                const updateData = { station: newName };
                
                // Ajouter GPS seulement si la recharge n'en a pas déjà
                if (newLat && newLng && !charge.latitude && !charge.longitude) {
                    updateData.latitude = newLat;
                    updateData.longitude = newLng;
                }
                
                updates.push(updateDoc(docSnap.ref, updateData));
                updateCount++;
            }
        });
        
        await Promise.all(updates);
        
        document.getElementById('edit-visited-modal').classList.add('hidden');
        showLoader(false);
        showToast(`${updateCount} recharge(s) mise(s) à jour`);
    } catch (error) {
        console.error("Error updating station:", error);
        showLoader(false);
        showToast("Erreur lors de la mise à jour", "error");
    }
});

                // Parse Google Maps link pour borne visitée
        document.getElementById('edit-visited-maps-link').addEventListener('input', (e) => {
    const link = e.target.value;
    const statusEl = document.getElementById('edit-visited-status');
    
    if (!link) {
        statusEl.textContent = '';
        return;
    }
    
    const coords = extractCoordsFromMapsLink(link);
    if (coords) {
        document.getElementById('edit-visited-latitude').value = coords.latitude;
        document.getElementById('edit-visited-longitude').value = coords.longitude;
        statusEl.textContent = `✓ Nouvelle position: ${coords.latitude}, ${coords.longitude}`;
        statusEl.className = 'text-xs mt-1 text-green-600 dark:text-green-400';
    } else {
        if (link.includes('goo.gl') || link.includes('maps.app.goo.gl')) {
            statusEl.textContent = '⚠ Lien raccourci. Ouvrez-le dans Maps puis copiez l\'URL complète.';
        } else {
            statusEl.textContent = '⚠ Format non reconnu';
        }
        statusEl.className = 'text-xs mt-1 text-orange-600 dark:text-orange-400';
    }
});

            // Modal d'édition de favoris
document.getElementById('cancel-edit-favorite').addEventListener('click', () => {
    document.getElementById('edit-favorite-modal').classList.add('hidden');
});

document.getElementById('edit-favorite-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    const id = document.getElementById('edit-favorite-id').value;
    const name = document.getElementById('edit-favorite-name').value;
    const cost = parseFloat(document.getElementById('edit-favorite-cost').value);
    const latitude = document.getElementById('edit-favorite-latitude').value;
    const longitude = document.getElementById('edit-favorite-longitude').value;
    
    const favData = {
        name,
        cost,
        latitude: latitude || null,
        longitude: longitude || null
    };
    
    try {
        const docRef = doc(appState.firebase.db, `users/${appState.firebase.userId}/favoriteStations`, id);
        await updateDoc(docRef, favData);
        document.getElementById('edit-favorite-modal').classList.add('hidden');
        showToast("Borne modifiée");
    } catch (error) {
        console.error("Error updating favorite:", error);
        showToast("Erreur lors de la modification", "error");
    }
});

// Parse Google Maps link dans le modal d'édition
document.getElementById('edit-favorite-maps-link').addEventListener('input', (e) => {
    const link = e.target.value;
    const statusEl = document.getElementById('edit-maps-link-status');
    
    if (!link) {
        statusEl.textContent = '';
        document.getElementById('edit-favorite-latitude').value = '';
        document.getElementById('edit-favorite-longitude').value = '';
        return;
    }
    
    const coords = extractCoordsFromMapsLink(link);
    if (coords) {
        document.getElementById('edit-favorite-latitude').value = coords.latitude;
        document.getElementById('edit-favorite-longitude').value = coords.longitude;
        statusEl.textContent = `✓ Position détectée: ${coords.latitude}, ${coords.longitude}`;
        statusEl.className = 'text-xs mt-1 text-green-600 dark:text-green-400';
    } else {
        if (link.includes('goo.gl') || link.includes('maps.app.goo.gl')) {
            statusEl.textContent = '⚠ Lien raccourci détecté. Ouvrez-le dans Maps, puis copiez l\'URL complète.';
        } else {
            statusEl.textContent = '⚠ Format de lien non reconnu';
        }
        statusEl.className = 'text-xs mt-1 text-orange-600 dark:text-orange-400';
        document.getElementById('edit-favorite-latitude').value = '';
        document.getElementById('edit-favorite-longitude').value = '';
    }
});
            
            // Keyboard shortcut
            document.addEventListener('keydown', (e) => {
                if ((e.ctrlKey || e.metaKey) && e.key === 'n') {
                    e.preventDefault();
                    openModal();
                }
            });
            // Real-time cost updates
            document.getElementById('kwh').addEventListener('input', updateTotalChargeCost);
            document.getElementById('cost-per-kwh').addEventListener('input', updateTotalChargeCost);
            document.getElementById('quick-kwh').addEventListener('input', updateQuickAddCost);
            document.getElementById('quick-cost-per-kwh').addEventListener('input', updateQuickAddCost);
            loginBtn.addEventListener('click', () => {
                const provider = new GoogleAuthProvider();
                signInWithPopup(appState.firebase.auth, provider).catch(error => {
                    console.error("Login failed:", error);
                    showToast("La connexion a échoué.", "error");
                });
            });

            logoutBtn.addEventListener('click', () => {
                signOut(appState.firebase.auth);
            });
            

            // Photo preview
            document.getElementById('photo').addEventListener('change', (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = (event) => {
        const img = new Image();
        img.onload = () => {
            const canvas = document.createElement('canvas');
            const maxSize = 800;
            let width = img.width;
            let height = img.height;
            
            if (width > height) {
                if (width > maxSize) {
                    height *= maxSize / width;
                    width = maxSize;
                }
            } else {
                if (height > maxSize) {
                    width *= maxSize / height;
                    height = maxSize;
                }
            }
            
            canvas.width = width;
            canvas.height = height;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0, width, height);
            
            currentPhotoBase64 = canvas.toDataURL('image/jpeg', 0.7);
            document.getElementById('photo-preview').src = currentPhotoBase64;
            document.getElementById('photo-preview').classList.remove('hidden');
        };
        img.src = event.target.result;
    };
    reader.readAsDataURL(file);
});

// Geolocation
            document.getElementById('get-location-btn').addEventListener('click', () => {
    const statusEl = document.getElementById('location-status');
    const btn = document.getElementById('get-location-btn');
    statusEl.textContent = 'Localisation en cours...';
    
    if (!navigator.geolocation) {
        showToast('Géolocalisation non supportée', 'error');
        statusEl.textContent = 'Capturer la position GPS';
        return;
    }
    
    navigator.geolocation.getCurrentPosition(
        (position) => {
            document.getElementById('latitude').value = position.coords.latitude;
            document.getElementById('longitude').value = position.coords.longitude;
            statusEl.innerHTML = '<i class="fas fa-check mr-2"></i>Position enregistrée';
            btn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
            btn.classList.add('bg-green-600');
            showToast('Position GPS capturée');
        },
        (error) => {
            showToast('Erreur de géolocalisation', 'error');
            statusEl.textContent = 'Capturer la position GPS';
        },
        { enableHighAccuracy: true, timeout: 10000 }
    );
});
// Parse Google Maps link
document.getElementById('favorite-maps-link').addEventListener('input', (e) => {
    const link = e.target.value;
    const statusEl = document.getElementById('maps-link-status');
    
    if (!link) {
        statusEl.textContent = '';
        document.getElementById('favorite-latitude').value = '';
        document.getElementById('favorite-longitude').value = '';
        return;
    }
    
    const coords = extractCoordsFromMapsLink(link);
    if (coords) {
        document.getElementById('favorite-latitude').value = coords.latitude;
        document.getElementById('favorite-longitude').value = coords.longitude;
        statusEl.textContent = `✓ Position détectée: ${coords.latitude}, ${coords.longitude}`;
        statusEl.className = 'text-xs mt-1 text-green-600 dark:text-green-400';
    } else {
        statusEl.textContent = '⚠ Format de lien non reconnu';
        statusEl.className = 'text-xs mt-1 text-orange-600 dark:text-orange-400';
        document.getElementById('favorite-latitude').value = '';
        document.getElementById('favorite-longitude').value = '';
    }
});

        const mobileSettingsBtn = document.getElementById('mobile-settings-btn');
if (mobileSettingsBtn) {
    mobileSettingsBtn.addEventListener('click', () => handleTabClick('parametres'));
}

// Tri des bornes visitées
document.querySelectorAll('.visited-sort-btn').forEach(btn => {
    btn.addEventListener('click', () => {
        document.querySelectorAll('.visited-sort-btn').forEach(b => b.classList.remove('active', 'bg-red-600', 'text-white'));
        btn.classList.add('active', 'bg-red-600', 'text-white');
        btn.classList.remove('bg-gray-200', 'dark:bg-gray-700');
        
        appState.sortState.visitedStations = btn.dataset.sort;
        renderVisitedStations();
    });
});

        }
        
        function handleSort(stateKey, sortKey, th) {
            const sortState = appState.sortState[stateKey];
            if (sortState.key === sortKey) {
                sortState.direction = sortState.direction === 'asc' ? 'desc' : 'asc';
            } else {
                sortState.key = sortKey;
                sortState.direction = 'desc';
            }

            // Update icons
            th.parentElement.querySelectorAll('i').forEach(i => i.className = 'fas fa-sort');
            th.querySelector('i').className = sortState.direction === 'asc' ? 'fas fa-sort-up' : 'fas fa-sort-down';

            if (stateKey === 'monthlyStats') updateMonthlyStatsTable();
            if (stateKey === 'efficiencyStats') updateEfficiencyTable();
        }

        function attachFirestoreListeners(userId) {
            const collections = ['charges', 'monthlyStats', 'favoriteStations'];
            collections.forEach(coll => {
                const collRef = collection(appState.firebase.db, `users/${userId}/${coll}`);
                const unsubscribe = onSnapshot(collRef, (snapshot) => {
                    appState[coll] = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                    
                    switch(coll) {
                        case 'charges':
                            updateDashboard();
                            updateHistoryTab();
                            updateStatsTab();
                            renderVisitedStations();
                            updateStationSuggestions(); // Add this call
                            break;
                        case 'monthlyStats':
                            updateEfficiencyTab();
                            break;
                        case 'favoriteStations':
                            renderFavoritesList();
                            populateFavoriteButtons();
                            populateFavoriteSelect();
                            renderVisitedStations();
                        break;
                    }
                });
                appState.listeners.push(unsubscribe);
            });
        }
        
        function detachFirestoreListeners() {
            appState.listeners.forEach(unsubscribe => unsubscribe());
            appState.listeners = [];
        }

        function updateStationSuggestions() {
            const uniqueStations = [...new Set(appState.charges.map(c => c.station))].sort();
            const datalist = document.getElementById('station-suggestions');
            const datalistQuick = document.getElementById('station-suggestions-quick');
            datalist.innerHTML = uniqueStations.map(s => `<option value="${s}">`).join('');
            datalistQuick.innerHTML = uniqueStations.map(s => `<option value="${s}">`).join('');
        }

        function updateTotalChargeCost() {
            const kwh = parseFloat(document.getElementById('kwh').value) || 0;
            const costPerKwh = parseFloat(document.getElementById('cost-per-kwh').value) || 0;
            const total = kwh * costPerKwh;
            document.getElementById('total-charge-cost').textContent = formatCurrency(total);
        }
        function updateQuickAddCost() {
    const kwh = parseFloat(document.getElementById('quick-kwh').value) || 0;
    const costPerKwh = parseFloat(document.getElementById('quick-cost-per-kwh').value) || 0;
    const total = kwh * costPerKwh;
    document.getElementById('quick-total-cost').textContent = formatCurrency(total);
}
// --- INITIALIZATION ---
function init() {
    const firebaseConfig = {
        apiKey: "AIzaSyCtpAUVaGv3_DtHfH_lxhV5iQHY_Pvaz1M",
        authDomain: "tesla-tracker-9e6b9.firebaseapp.com",
        projectId: "tesla-tracker-9e6b9",
        storageBucket: "tesla-tracker-9e6b9.appspot.com",
        messagingSenderId: "785714172997",
        appId: "1:785714172997:web:4777b2b448c88da8b0bf2c"
    };
    
    // Timeout de sécurité pour masquer le loader après 5 secondes max
    const loaderTimeout = setTimeout(() => {
        console.warn("Firebase timeout - masquage forcé du loader");
        showLoader(false);
    }, 5000);
                
    const app = initializeApp(firebaseConfig);
    appState.firebase.auth = getAuth(app);
    appState.firebase.db = getFirestore(app);

    // Détection du mode standalone (depuis écran d'accueil)
    const isStandalone = window.navigator.standalone || window.matchMedia('(display-mode: standalone)').matches;
    
    onAuthStateChanged(appState.firebase.auth, user => {
        clearTimeout(loaderTimeout); // Annuler le timeout si Firebase répond
        detachFirestoreListeners();
        
        if (user) {
            appState.firebase.userId = user.uid;
            userNameEl.textContent = user.displayName || user.email;
            loginBtn.classList.add('hidden');
            userInfo.classList.remove('hidden');
            loggedOutView.classList.add('hidden');
            loggedInView.classList.remove('hidden');
            fab.classList.remove('hidden');

            attachFirestoreListeners(user.uid);
            showLoader(false);
        } else {
            // Si en mode standalone et pas connecté, afficher un message
            if (isStandalone) {
                showToast("Veuillez vous connecter via Safari avant d'utiliser l'app sur l'écran d'accueil", "error");
            }
            
            appState.firebase.userId = null;
            appState.charges = [];
            appState.monthlyStats = [];
            appState.favoriteStations = [];
            
            loginBtn.classList.remove('hidden');
            userInfo.classList.add('hidden');
            loggedOutView.classList.remove('hidden');
            loggedInView.classList.add('hidden');
            fab.classList.add('hidden');
            
            updateAllTabs();
            showLoader(false);
        }
    });
    
    const savedTheme = localStorage.getItem('theme') || 'dark';
    applyTheme(savedTheme);
    initializeEventListeners();
    populateMileageMonthSelect();
    checkMileageReminder();
}

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
} else {
    init();
}

    </script>
</body>
</html>
